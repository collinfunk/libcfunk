/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_CTYPE_H
#define COMPAT_CTYPE_H

#include <config.h>

#if @HAVE_CTYPE_H@
#  include_next <ctype.h>
#endif

/* Replacement functions for <ctype.h> if they are missing. */

#if !@HAVE_ISALNUM@
extern int isalnum (int c);
#endif

#if !@HAVE_ISALPHA@
extern int isalpha (int c);
#endif

#if !@HAVE_ISASCII@
extern int isascii (int c);
#endif

#if !@HAVE_ISBLANK@
extern int isblank (int c);
#endif

#if !@HAVE_ISCNTRL@
extern int iscntrl (int c);
#endif

#if !@HAVE_ISDIGIT@
extern int isdigit (int c);
#endif

#if !@HAVE_ISGRAPH@
extern int isgraph (int c);
#endif

#if !@HAVE_ISLOWER@
extern int islower (int c);
#endif

#if !@HAVE_ISPRINT@
extern int isprint (int c);
#endif

#if !@HAVE_ISPUNCT@
extern int ispunct (int c);
#endif

#if !@HAVE_ISSPACE@
extern int isspace (int c);
#endif

#if !@HAVE_ISUPPER@
extern int isupper (int c);
#endif

#if !@HAVE_ISXDIGIT@
extern int isxdigit (int c);
#endif

#if !@HAVE_TOASCII@
extern int toascii (int c);
#endif

#if !@HAVE_TOLOWER@
extern int tolower (int c);
#endif

#if !@HAVE_TOUPPER@
extern int toupper (int c);
#endif

/* POSIX requires that these are defined as macros. They are required
   to check C is a lowercase character before converting (or vice versa).
   This is already required in the non prefixed functions according to C99. */
#ifndef _toupper
#  define _toupper(c) toupper ((c))
#endif

#ifndef _tolower
#  define _tolower(c) tolower ((c))
#endif

#endif /* COMPAT_CTYPE_H */
