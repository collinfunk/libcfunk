/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_CTYPE_H
#define COMPAT_CTYPE_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_CTYPE_H@
#  include_next <ctype.h>
#endif

#if @LIBCFUNK_DECLARE_ISALNUM@
#  if !@HAVE_ISALNUM@
#    undef isalnum
extern int isalnum (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISALPHA@
#  if !@HAVE_ISALPHA@
#    undef isalpha
extern int isalpha (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISASCII@
#  if !@HAVE_ISASCII@
#    undef isascii
extern int isascii (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISBLANK@
#  if !@HAVE_ISBLANK@
#    undef isblank
extern int isblank (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISCNTRL@
#  if !@HAVE_ISCNTRL@
#    undef iscntrl
extern int iscntrl (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISDIGIT@
#  if !@HAVE_ISDIGIT@
#    undef isdigit
extern int isdigit (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISGRAPH@
#  if !@HAVE_ISGRAPH@
#    undef isgraph
extern int isgraph (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISLOWER@
#  if !@HAVE_ISLOWER@
#    undef islower
extern int islower (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISPRINT@
#  if !@HAVE_ISPRINT@
#    undef isprint
extern int isprint (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISPUNCT@
#  if !@HAVE_ISPUNCT@
#    undef ispunct
extern int ispunct (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISSPACE@
#  if !@HAVE_ISSPACE@
#    undef isspace
extern int isspace (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISUPPER@
#  if !@HAVE_ISUPPER@
#    undef isupper
extern int isupper (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISXDIGIT@
#  if !@HAVE_ISXDIGIT@
#    undef isxdigit
extern int isxdigit (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_TOASCII@
#  if !@HAVE_TOASCII@
#    undef toascii
extern int toascii (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_TOLOWER@
#  if !@HAVE_TOLOWER@
#    undef tolower
extern int tolower (int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_TOUPPER@
#  if !@HAVE_TOUPPER@
#    undef toupper
extern int toupper (int ch);
#  endif
#endif

#ifndef _tolower
#  define _tolower tolower
#endif

#ifndef _toupper
#  define _toupper toupper
#endif

#endif /* COMPAT_CTYPE_H */
