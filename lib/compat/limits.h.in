/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_LIMITS_H
#define COMPAT_LIMITS_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_LIMITS_H@
#  include_next <limits.h>
#endif

#if @HAVE_SYS_PARAM_H@
#  include <sys/param.h>
#endif

#ifndef HOST_NAME_MAX
#  ifndef MAXHOSTNAMELEN
#    define HOST_NAME_MAX MAXHOSTNAMELEN
#  else
#    define HOST_NAME_MAX 256
#  endif
#endif

#ifndef CHAR_BIT
#  define CHAR_BIT 8
#endif

#ifndef WORD_BIT
#  define WORD_BIT (@SIZEOF_INT@ * CHAR_BIT)
#endif

#ifndef LONG_BIT
#  define LONG_BIT (@SIZEOF_LONG@ * CHAR_BIT)
#endif

#ifndef SCHAR_WIDTH
#  define SCHAR_WIDTH CHAR_BIT
#endif

#ifndef SHRT_WIDTH
#  define SHRT_WIDTH (@SIZEOF_SHORT@ * CHAR_BIT)
#endif

#ifndef INT_WIDTH
#  define INT_WIDTH WORD_BIT
#endif

#ifndef LONG_WIDTH
#  define LONG_WIDTH LONG_BIT
#endif

#ifndef LLONG_WIDTH
#  define LLONG_WIDTH (@SIZEOF_LONG_LONG@ * CHAR_BIT)
#endif

#ifndef UCHAR_WIDTH
#  define UCHAR_WIDTH SCHAR_WIDTH
#endif

#ifndef USHRT_WIDTH
#  define USHRT_WIDTH SHRT_WIDTH
#endif

#ifndef UINT_WIDTH
#  define UINT_WIDTH INT_WIDTH
#endif

#ifndef ULONG_WIDTH
#  define ULONG_WIDTH LONG_WIDTH
#endif

#ifndef ULLONG_WIDTH
#  define ULLONG_WIDTH LLONG_WIDTH
#endif

#ifndef CHAR_WIDTH
#  define CHAR_WIDTH CHAR_BIT
#endif

#ifndef SCHAR_MAX
#  if SCHAR_WIDTH == 8
#    define SCHAR_MAX 0x7f
#  elif SCHAR_WIDTH == 16
#    define SCHAR_MAX 0x7fff
#  elif SCHAR_WIDTH == 32
#    define SCHAR_MAX 0x7fffffff
#  elif SCHAR_WIDTH == 64
#    define SCHAR_MAX 0x7fffffffffffffff
#  endif
#endif

#ifndef SHRT_MAX
#  if SHRT_WIDTH == 16
#    define SHRT_MAX 0x7fff
#  elif SHRT_WIDTH == 32
#    define SHRT_MAX 0x7fffffff
#  elif SHRT_WIDTH == 64
#    define SHRT_MAX 0x7fffffffffffffff
#  endif
#endif

#ifndef INT_MAX
#  if INT_WIDTH == 16
#    define INT_MAX 0x7fff
#  elif INT_WIDTH == 32
#    define INT_MAX 0x7fffffff
#  elif INT_WIDTH == 64
#    define INT_MAX 0x7fffffffffffffff
#  endif
#endif

#ifndef LONG_MAX
#  if LONG_WIDTH == 32
#    define LONG_MAX 0x7fffffffL
#  elif LONG_WIDTH == 64
#    define LONG_MAX 0x7fffffffffffffffL
#  endif
#endif

#ifndef LLONG_MAX
#  define LONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef UCHAR_MAX
#  if SCHAR_MAX == INT_MAX
#    define UCHAR_MAX (SCHAR_MAX * 2U + 1U)
#  else
#    define UCHAR_MAX (SCHAR_MAX * 2 + 1)
#  endif
#endif

#ifndef USHRT_MAX
#  if SHRT_MAX == INT_MAX
#    define USHRT_MAX (SHRT_MAX * 2U + 1U)
#  else
#    define USHRT_MAX (SHRT_MAX * 2 + 1)
#  endif
#endif

#ifndef UINT_MAX
#  define UINT_MAX (INT_MAX * 2U + 1U)
#endif

#ifndef ULONG_MAX
#  define ULONG_MAX (LONG_MAX * 2UL + 1UL)
#endif

#ifndef ULLONG_MAX
#  define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
#endif

#ifndef SCHAR_MIN
#  define SCHAR_MIN (-SCHAR_MAX - 1)
#endif

#ifndef SHRT_MIN
#  define SHRT_MIN (-SHRT_MAX - 1)
#endif

#ifndef INT_MIN
#  define INT_MIN (-INT_MAX - 1)
#endif

#ifndef LONG_MIN
#  define LONG_MIN (-LONG_MAX - 1L)
#endif

#ifndef LLONG_MIN
#  define LLONG_MIN (-LLONG_MAX - 1LL)
#endif

#ifndef CHAR_MIN
#  if @CHAR_IS_UNSIGNED@
#    if SCHAR_MAX == INT_MAX
#      define CHAR_MIN 0U
#    else
#      define CHAR_MIN 0
#    endif
#  else
#    define CHAR_MIN SCHAR_MIN
#  endif
#endif

#ifndef CHAR_MAX
#  if @CHAR_IS_UNSIGNED@
#    define CHAR_MAX UCHAR_MAX
#  else
#    define CHAR_MAX SCHAR_MAX
#  endif
#endif

#ifndef LONG_LONG_MAX
#  define LONG_LONG_MAX LLONG_MAX
#endif

#ifndef LONG_LONG_MIN
#  define LONG_LONG_MIN LLONG_MIN
#endif

#ifndef ULONG_LONG_MAX
#  define ULONG_LONG_MAX ULLONG_MAX
#endif

#ifndef MB_LEN_MAX
#  define MB_LEN_MAX 1
#endif

#ifndef SSIZE_MAX
#  if (@SIZEOF_SSIZE_T@ * CHAR_BIT) == SCHAR_WIDTH
#    define SSIZE_MAX SCHAR_MAX
#  elif (@SIZEOF_SSIZE_T@ * CHAR_BIT) == SHRT_WIDTH
#    define SSIZE_MAX SHRT_MAX
#  elif (@SIZEOF_SSIZE_T@ * CHAR_BIT) == INT_WIDTH
#    define SSIZE_MAX INT_MAX
#  elif (@SIZEOF_SSIZE_T@ * CHAR_BIT) == LONG_WIDTH
#    define SSIZE_MAX LONG_MAX
#  elif (@SIZEOF_SSIZE_T@ * CHAR_BIT) == LLONG_WIDTH
#    define SSIZE_MAX LLONG_MAX
#  endif
#endif

#endif /* COMPAT_LIMITS_H */
