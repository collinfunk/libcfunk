/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_STDLIB_H
#define COMPAT_STDLIB_H

#include <sys/types.h>

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_STDLIB_H@
#  include_next <stdlib.h>
#endif

#ifndef EXIT_FAILURE
#  define EXIT_FAILURE 1
#else
#  if EXIT_FAILURE != 1
#    undef EXIT_FAILURE
#    define EXIT_FAILURE 1
#  endif
#endif

#ifndef EXIT_SUCCESS
#  define EXIT_SUCCESS 0
#else
#  if EXIT_SUCCESS != 0
#    undef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#  endif
#endif

#if @LIBCFUNK_DECLARE_ABS@
#  if !@HAVE_ABS@
extern int abs (int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LABS@
#  if !@HAVE_LABS@
extern long int labs (long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LLABS@
#  if !@HAVE_LLABS@
extern long long int llabs (long long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ATOI@
#  if !@HAVE_ATOI@
extern int atoi (const char *str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ATOL@
#  if !@HAVE_ATOL@
extern long int atol (const char *str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ATOLL@
#  if !@HAVE_ATOLL@
extern long long int atoll (const char *str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_REALLOCARRAY@
#  if !@HAVE_REALLOCARRAY@
extern void *reallocarray (void *ptr, size_t nelem, size_t elsize);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRTOL@
#  if !@HAVE_STRTOL@
extern long int strtol (const char *str, char **endptr, int base);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRTOLL@
#  if !@HAVE_STRTOLL@
extern long long int strtoll (const char *str, char **endptr, int base);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRTOUL@
#  if !@HAVE_STRTOUL@
extern unsigned long int strtoul (const char *str, char **endptr, int base);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRTOULL@
#  if !@HAVE_STRTOULL@
extern unsigned long long int strtoull (const char *str, char **endptr,
                                        int base);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SECURE_GETENV@
#  if !@HAVE_SECURE_GETENV@
extern char *secure_getenv (const char *name);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MKSTEMP@
#  if !@HAVE_MKSTEMP@
extern int mkstemp (char *template);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MKDTEMP@
#  if !@HAVE_MKDTEMP@
extern char *mkdtemp (char *template);
#  endif
#endif

#if @LIBCFUNK_DECLARE_BSEARCH@
#  if !@HAVE_BSEARCH@
extern void *bsearch (const void *key, const void *base, size_t nel,
                      size_t width, int (*compar) (const void *,
                                                   const void *));
#  endif
#endif

#endif /* COMPAT_STDLIB_H */
