/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_STDLIB_H
#define COMPAT_STDLIB_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_STDLIB_H@
#  include_next <stdlib.h>
#endif

#include <sys/types.h>
#include <sys/wait.h>

#include <stddef.h>
#include <stdint.h>

/* Solaris. */
#if @HAVE_SYS_LOADAVG_H@
#  include <sys/loadavg.h>
#endif

#if !@HAVE_DIV_T@
typedef struct
{
  int quot;
  int rem;
} div_t;
#endif

#if !@HAVE_LDIV_T@
typedef struct
{
  long int quot;
  long int rem;
} ldiv_t;
#endif

#if !@HAVE_LLDIV_T@
typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;
#endif

#if !@HAVE_STRUCT_RANDOM_DATA@
struct random_data
{
  int32_t *fptr;
  int32_t *rptr;
  int32_t *state;
  int rand_type;
  int rand_deg;
  int rand_sep;
  int32_t *end_ptr;
};
#endif

#ifndef EXIT_SUCCESS
#  define EXIT_SUCCESS 0
#elif EXIT_SUCCESS != 0
#  undef EXIT_SUCCESS
#  define EXIT_SUCCESS 0
#endif

#ifndef EXIT_FAILURE
#  define EXIT_FAILURE 1
#elif EXIT_FAILURE != 1
#  undef EXIT_FAILURE
#  define EXIT_FAILURE 1
#endif

#ifndef RAND_MAX
#  define RAND_MAX 2147483647
#endif

#if @LIBCFUNK_DECLARE_ABS@
#  if !@HAVE_ABS@
extern int abs (int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ATEXIT@
#  if !@HAVE_ATEXIT@
extern int atexit (void (*function) (void));
#  endif
#endif

#if @LIBCFUNK_DECLARE_ATOI@
#  if !@HAVE_ATOI@
extern int atoi (const char *str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ATOL@
#  if !@HAVE_ATOL@
extern long int atol (const char *str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ATOLL@
#  if !@HAVE_ATOLL@
extern long long int atoll (const char *str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_BSEARCH@
#  if @LIBCFUNK_REPLACE_BSEARCH@
#    undef bsearch
#    define bsearch _libcfunk_bsearch
extern void *_libcfunk_bsearch (const void *key, const void *base, size_t nel,
                                size_t width, int (*compar) (const void *,
                                                             const void *));
#  elif !@HAVE_BSEARCH@
extern void *bsearch (const void *key, const void *base, size_t nel,
                      size_t width, int (*compar) (const void *,
                                                   const void *));
#  endif
#endif

#if @LIBCFUNK_DECLARE_C99__EXIT@
#  if !@HAVE_C99__EXIT@
extern void _Exit (int status);
#  endif
#endif

#if @LIBCFUNK_DECLARE_CALLOC@
#  if @LIBCFUNK_REPLACE_CALLOC@
#    undef calloc
#    define calloc _libcfunk_calloc
extern void *_libcfunk_calloc (size_t nelem, size_t elsize);
#  endif
#endif

#if @LIBCFUNK_DECLARE_DIV@
#  if !@HAVE_DIV@
extern div_t div (int numer, int denom);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FREE@
#  if @LIBCFUNK_REPLACE_FREE@
#    undef free
#    define free _libcfunk_free
extern void _libcfunk_free (void *ptr);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETENV@
#  if @LIBCFUNK_REPLACE_GETENV@
#    undef getenv
#    define getenv _libcfunk_getenv
extern char *_libcfunk_getenv (const char *name);
#  elif !@HAVE_GETENV@
extern char *getenv (const char *name);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETLOADAVG@
#  if !@HAVE_GETLOADAVG@
extern int getloadavg (double loadavg[], int nelem);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LABS@
#  if !@HAVE_LABS@
extern long int labs (long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LDIV@
#  if !@HAVE_LDIV@
extern ldiv_t ldiv (long int numer, long int denom);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LLABS@
#  if !@HAVE_LLABS@
extern long long int llabs (long long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LLDIV@
#  if !@HAVE_LLDIV@
extern lldiv_t lldiv (long long int numer, long long int denom);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MALLOC@
#  if @LIBCFUNK_REPLACE_MALLOC@
#    undef malloc
#    define malloc _libcfunk_malloc
extern void *_libcfunk_malloc (size_t size);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MBTOWC@
#  if !@HAVE_MBTOWC@
extern int mbtowc (wchar_t *pwc, const char *s, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MKDTEMP@
#  if !@HAVE_MKDTEMP@
extern char *mkdtemp (char *template);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MKSTEMP@
#  if !@HAVE_MKSTEMP@
extern int mkstemp (char *template);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_OPENPT@
#  if !@HAVE_POSIX_OPENPT@
extern int posix_openpt (int flags);
#  endif
#endif

#if @LIBCFUNK_DECLARE_PUTENV@
#  if @LIBCFUNK_REPLACE_PUTENV@
#    undef putenv
#    define putenv _libcfunk_putenv
extern int _libcfunk_putenv (char *string);
#  elif !@HAVE_PUTENV@
extern int putenv (char *string);
#  endif
#endif

#if @LIBCFUNK_DECLARE_RAND@
#  if @LIBCFUNK_REPLACE_RAND@
#    undef rand
#    define rand _libcfunk_rand
extern int rand (void);
#  elif !@HAVE_RAND@
extern int rand (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_RANDOM@
#  if @LIBCFUNK_REPLACE_RANDOM@
#    undef random
#    define random _libcfunk_random
extern long int _libcfunk_random (void);
#  elif !@HAVE_RANDOM@
extern long int random (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_REALLOC@
#  if @LIBCFUNK_REPLACE_REALLOC@
#    undef realloc
#    define realloc _libcfunk_realloc
extern void *_libcfunk_realloc (void *ptr, size_t size);
#  endif
#endif

#if @LIBCFUNK_DECLARE_REALLOCARRAY@
#  if !@HAVE_REALLOCARRAY@
extern void *reallocarray (void *ptr, size_t nelem, size_t elsize);
#  endif
#endif

#if @LIBCFUNK_DECLARE_REALLOCF@
#  if !@HAVE_REALLOCF@
extern void *reallocf (void *ptr, size_t size);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SECURE_GETENV@
#  if !@HAVE_SECURE_GETENV@
extern char *secure_getenv (const char *name);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRTOL@
#  if @LIBCFUNK_REPLACE_STRTOL@
#    undef strtol
#    define strtol _libcfunk_strtol
extern long int _libcfunk_strtol (const char *restrict nptr,
                                  char **restrict endptr, int base);
#  elif !@HAVE_STRTOL@
extern long int strtol (const char *restrict nptr, char **restrict endptr,
                        int base);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRTOLL@
#  if @LIBCFUNK_REPLACE_STRTOLL@
#    undef strtoll
#    define strtoll _libcfunk_strtoll
extern long long int _libcfunk_strtoll (const char *restrict nptr,
                                        char **restrict endptr, int base);
#  elif !@HAVE_STRTOLL@
extern long long int strtoll (const char *restrict nptr,
                              char **restrict endptr, int base);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRTOUL@
#  if @LIBCFUNK_REPLACE_STRTOUL@
#    undef strtoul
#    define strtoul _libcfunk_strtoul
extern unsigned long int _libcfunk_strtoul (const char *restrict str,
                                            char **restrict endptr, int base);
#  elif !@HAVE_STRTOUL@
extern unsigned long int strtoul (const char *restrict str,
                                  char **restrict endptr, int base);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRTOULL@
#  if @LIBCFUNK_REPLACE_STRTOULL@
#    undef strtoull
#    define strtoull _libcfunk_strtoull
extern unsigned long long int _libcfunk_strtoull (const char *restrict str,
                                                  char **restrict endptr,
                                                  int base);
#  elif !@HAVE_STRTOULL@
extern unsigned long long int strtoull (const char *restrict str,
                                        char **restrict endptr, int base);
#  endif
#endif

#if @LIBCFUNK_DECLARE_UNLOCKPT@
#  if !@HAVE_UNLOCKPT@
extern int unlockpt (int fd);
#  endif
#endif

#if @LIBCFUNK_DECLARE_UNSETENV@
#  if @LIBCFUNK_REPLACE_UNSETENV@
#    undef unsetenv
#    define unsetenv _libcfunk_unsetenv
extern int _libcfunk_unsetenv (const char *name);
#  elif !@HAVE_UNSETENV@
extern int unsetenv (const char *name);
#  endif
#endif

#if @LIBCFUNK_DECLARE_WCTOMB@
#  if !@HAVE_WCTOMB@
extern int wctomb (char *s, wchar_t wc);
#  endif
#endif

#endif /* COMPAT_STDLIB_H */
