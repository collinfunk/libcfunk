/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_STRINGS_H
#define COMPAT_STRINGS_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_STRINGS_H@
#  include_next <strings.h>
#endif

#include <sys/types.h>

#include <stddef.h>
#include <string.h>

#if @LIBCFUNK_DECLARE_BCMP@
#  if @LIBCFUNK_REPLACE_BCMP@
#    undef bcmp
#    define bcmp _libcfunk_bcmp
extern int _libcfunk_bcmp (const void *s1, const void *s2, size_t n);
#  elif !@HAVE_BCMP@
extern int bcmp (const void *s1, const void *s2, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_BCOPY@
#  if @LIBCFUNK_REPLACE_BCOPY@
#    undef bcopy
#    define bcopy _libcfunk_bcopy
extern void _libcfunk_bcopy (const void *s1, void *s2, size_t n);
#  elif !@HAVE_BCOPY@
extern void bcopy (const void *s1, void *s2, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_BZERO@
#  if @LIBCFUNK_REPLACE_BZERO@
#    undef bzero
#    define bzero _libcfunk_bzero
extern void _libcfunk_bzero (void *s, size_t n);
#  elif !@HAVE_BZERO@
extern void bzero (void *s, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FFS@
#  if @LIBCFUNK_REPLACE_FFS@
#    undef ffs
#    define ffs _libcfunk_ffs
extern int _libcfunk_ffs (int value);
#  elif !@HAVE_FFS@
extern int ffs (int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FFSL@
#  if @LIBCFUNK_REPLACE_FFSL@
#    undef ffsl
#    define ffsl _libcfunk_ffsl
extern int _libcfunk_ffsl (long int value);
#  elif !@HAVE_FFSL@
extern int ffsl (long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FFSLL@
#  if @LIBCFUNK_REPLACE_FFSLL@
#    undef ffsll
#    define ffsll _libcfunk_ffsll
extern int _libcfunk_ffsll (long long int value);
#  elif !@HAVE_FFSLL@
extern int ffsll (long long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FLS@
#  if !@HAVE_FLS@
extern int fls (int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FLSL@
#  if !@HAVE_FLSL@
extern int flsl (long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FLSLL@
#  if !@HAVE_FLSLL@
extern int flsll (long long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_INDEX@
#  if @LIBCFUNK_REPLACE_INDEX@
#    undef index
#    define index _libcfunk_index
extern char *_libcfunk_index (const char *s, int c);
#  elif !@HAVE_INDEX@
extern char *index (const char *s, int c);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POPCOUNT@
#  if !@HAVE_POPCOUNT@
extern unsigned int popcount (unsigned int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POPCOUNTL@
#  if !@HAVE_POPCOUNTL@
extern unsigned int popcountl (unsigned long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POPCOUNTLL@
#  if !@HAVE_POPCOUNTLL@
extern unsigned int popcountll (unsigned long long int value);
#  endif
#endif

#if @LIBCFUNK_DECLARE_RINDEX@
#  if @LIBCFUNK_REPLACE_RINDEX@
#    undef rindex
#    define rindex _libcfunk_rindex
extern char *_libcfunk_rindex (const char *s, int c);
#  elif !@HAVE_RINDEX@
extern char *rindex (const char *s, int c);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRCASECMP@
#  if !@HAVE_STRCASECMP@
extern int strcasecmp (const char *str1, const char *str2);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRNCASECMP@
#  if !@HAVE_STRNCASECMP@
extern int strncasecmp (const char *str1, const char *str2, size_t size);
#  endif
#endif

#endif /* COMPAT_STRINGS_H */
