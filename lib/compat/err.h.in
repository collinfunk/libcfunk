/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_ERR_H
#define COMPAT_ERR_H

#include <config.h>
#include <stdarg.h>

/* BSD-like error message functions. */

#if @HAVE_ERR_H@
#  include_next <err.h>
#endif

#if @LIBCFUNK_DECLARE_ERR@
#  if !HAVE_ERR
extern void err (int status, const char *format, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_VERR@
#  if !HAVE_VERR
extern void verr (int status, const char *format, va_list args);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ERRC@
#  if !HAVE_ERRC
extern void errc (int status, int code, const char *format, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_VERRC@
#  if !HAVE_VERRC
extern void verrc (int status, int code, const char *format, va_list args);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ERRX@
#  if !HAVE_ERRX
extern void errx (int status, const char *format, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_VERRX@
#  if !HAVE_VERRX
extern void verrx (int status, const char *format, va_list args);
#  endif
#endif

#if @LIBCFUNK_DECLARE_WARN@
#  if !HAVE_WARN
extern void warn (const char *format, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_VWARN@
#  if !HAVE_VWARN
extern void vwarn (const char *format, va_list args);
#  endif
#endif

#if @LIBCFUNK_DECLARE_WARNC@
#  if !HAVE_WARNC
extern void warnc (int code, const char *format, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_VWARNC@
#  if !HAVE_VWARNC
extern void vwarnc (int code, const char *format, va_list args);
#  endif
#endif

#if @LIBCFUNK_DECLARE_WARNX@
#  if !HAVE_WARNX
extern void warnx (const char *format, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_VWARNX@
#  if !HAVE_VWARNX
extern void vwarnx (const char *format, va_list args);
#  endif
#endif

#endif /* COMPAT_ERR_H */
