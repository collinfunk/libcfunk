/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_STDINT_H
#define COMPAT_STDINT_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_STDINT_H@
#  if @HAVE_INCLUDE_NEXT@
#    include_next <stdint.h>
#  else
#    include "@STDINT_H_PATH@"
#  endif
#endif

#include <limits.h>

#ifndef INT8_WIDTH
#  define INT8_WIDTH @INT8_WIDTH@
#endif

#ifndef INT16_WIDTH
#  define INT16_WIDTH @INT16_WIDTH@
#endif

#ifndef INT32_WIDTH
#  define INT32_WIDTH @INT32_WIDTH@
#endif

#ifndef INT64_WIDTH
#  define INT64_WIDTH @INT64_WIDTH@
#endif

#ifndef UINT8_WIDTH
#  define UINT8_WIDTH @UINT8_WIDTH@
#endif

#ifndef UINT16_WIDTH
#  define UINT16_WIDTH @UINT16_WIDTH@
#endif

#ifndef UINT32_WIDTH
#  define UINT32_WIDTH @UINT32_WIDTH@
#endif

#ifndef UINT64_WIDTH
#  define UINT64_WIDTH @UINT64_WIDTH@
#endif

#ifndef INT_LEAST8_WIDTH
#  define INT_LEAST8_WIDTH @INT_LEAST8_WIDTH@
#endif

#ifndef INT_LEAST16_WIDTH
#  define INT_LEAST16_WIDTH @INT_LEAST16_WIDTH@
#endif

#ifndef INT_LEAST32_WIDTH
#  define INT_LEAST32_WIDTH @INT_LEAST32_WIDTH@
#endif

#ifndef INT_LEAST64_WIDTH
#  define INT_LEAST64_WIDTH @INT_LEAST64_WIDTH@
#endif

#ifndef UINT_LEAST8_WIDTH
#  define UINT_LEAST8_WIDTH @UINT_LEAST8_WIDTH@
#endif

#ifndef UINT_LEAST16_WIDTH
#  define UINT_LEAST16_WIDTH @UINT_LEAST16_WIDTH@
#endif

#ifndef UINT_LEAST32_WIDTH
#  define UINT_LEAST32_WIDTH @UINT_LEAST32_WIDTH@
#endif

#ifndef UINT_LEAST64_WIDTH
#  define UINT_LEAST64_WIDTH @UINT_LEAST64_WIDTH@
#endif

#ifndef INT_FAST8_WIDTH
#  define INT_FAST8_WIDTH @INT_FAST8_WIDTH@
#endif

#ifndef INT_FAST16_WIDTH
#  define INT_FAST16_WIDTH @INT_FAST16_WIDTH@
#endif

#ifndef INT_FAST32_WIDTH
#  define INT_FAST32_WIDTH @INT_FAST32_WIDTH@
#endif

#ifndef INT_FAST64_WIDTH
#  define INT_FAST64_WIDTH @INT_FAST64_WIDTH@
#endif

#ifndef UINT_FAST8_WIDTH
#  define UINT_FAST8_WIDTH @UINT_FAST8_WIDTH@
#endif

#ifndef UINT_FAST16_WIDTH
#  define UINT_FAST16_WIDTH @UINT_FAST16_WIDTH@
#endif

#ifndef UINT_FAST32_WIDTH
#  define UINT_FAST32_WIDTH @UINT_FAST32_WIDTH@
#endif

#ifndef UINT_FAST64_WIDTH
#  define UINT_FAST64_WIDTH @UINT_FAST64_WIDTH@
#endif

#ifndef INTPTR_WIDTH
#  define INTPTR_WIDTH @INTPTR_WIDTH@
#endif

#ifndef UINTPTR_WIDTH
#  define UINTPTR_WIDTH @UINTPTR_WIDTH@
#endif

#ifndef INTMAX_WIDTH
#  define INTMAX_WIDTH @INTMAX_WIDTH@
#endif

#ifndef UINTMAX_WIDTH
#  define UINTMAX_WIDTH @UINTMAX_WIDTH@
#endif

#ifndef PTRDIFF_WIDTH
#  define PTRDIFF_WIDTH @PTRDIFF_WIDTH@
#endif

#ifndef SIG_ATOMIC_WIDTH
#  if @HAVE_SIG_ATOMIC_T@
#    define SIG_ATOMIC_WIDTH (@SIG_ATOMIC_T@ * CHAR_BIT)
#  else
/* TODO */
#  endif
#endif

#ifndef SIZE_WIDTH
#  define SIZE_WIDTH @SIZE_WIDTH@
#endif

#ifndef WCHAR_WIDTH
#  if @HAVE_WCHAR_T@
#    define WCHAR_WIDTH (@WCHAR_T@ * CHAR_BIT)
#  else
/* TODO */
#  endif
#endif

#ifndef WINT_WIDTH
#  if @HAVE_WINT_T@
#    define WINT_WIDTH (@WINT_T@ * CHAR_BIT)
#  else
/* TODO */
#  endif
#endif

#ifndef INT8_C
#  define INT8_C(value) value
#endif

#ifndef INT16_C
#  define INT16_C(value) value
#endif

#ifndef INT32_C
#  define INT32_C(value) value
#endif

#ifndef INT64_C
#  if INT64_WIDTH == LONG_WIDTH
#    define INT64_C(value) value ## L
#  else
#    define INT64_C(value) value ## LL
#  endif
#endif

#ifndef UINT8_C
#  define UINT8_C(value) value
#endif

#ifndef UINT16_C
#  define UINT16_C(value) value
#endif

#ifndef UINT32_C
#  define UINT32_C(value) value ## U
#endif

#ifndef UINT64_C
#  if UINT64_WIDTH == ULONG_WIDTH
#    define UINT64_C(value) value ## UL
#  else
#    define UINT64_C(value) value ## ULL
#  endif
#endif

#ifndef INT8_MAX
#  define INT8_MAX @INT8_MAX@
#endif

#ifndef INT16_MAX
#  define INT16_MAX @INT16_MAX@
#endif

#ifndef INT32_MAX
#  define INT32_MAX @INT32_MAX@
#endif

#ifndef INT64_MAX
#  define INT64_MAX @INT64_MAX@
#endif

#ifndef UINT8_MAX
#  define UINT8_MAX @UINT8_MAX@
#endif

#ifndef UINT16_MAX
#  define UINT16_MAX @UINT16_MAX@
#endif

#ifndef UINT32_MAX
#  define UINT32_MAX @UINT32_MAX@
#endif

#ifndef UINT64_MAX
#  define UINT64_MAX @UINT64_MAX@
#endif

#ifndef INT8_MIN
#  define INT8_MIN @INT8_MIN@
#endif

#ifndef INT16_MIN
#  define INT16_MIN @INT16_MIN@
#endif

#ifndef INT32_MIN
#  define INT32_MIN @INT32_MIN@
#endif

#ifndef INT64_MIN
#  define INT64_MIN @INT64_MIN@
#endif

#ifndef INT_LEAST8_MAX
#  define INT_LEAST8_MAX @INT_LEAST8_MAX@
#endif

#ifndef INT_LEAST16_MAX
#  define INT_LEAST16_MAX @INT_LEAST16_MAX@
#endif

#ifndef INT_LEAST32_MAX
#  define INT_LEAST32_MAX @INT_LEAST32_MAX@
#endif

#ifndef INT_LEAST64_MAX
#  define INT_LEAST64_MAX @INT_LEAST64_MAX@
#endif

#ifndef UINT_LEAST8_MAX
#  define UINT_LEAST8_MAX @UINT_LEAST8_MAX@
#endif

#ifndef UINT_LEAST16_MAX
#  define UINT_LEAST16_MAX @UINT_LEAST16_MAX@
#endif

#ifndef UINT_LEAST32_MAX
#  define UINT_LEAST32_MAX @UINT_LEAST32_MAX@
#endif

#ifndef UINT_LEAST64_MAX
#  define UINT_LEAST64_MAX @UINT_LEAST64_MAX@
#endif

#ifndef INT_LEAST8_MIN
#  define INT_LEAST8_MIN @INT_LEAST8_MIN@
#endif

#ifndef INT_LEAST16_MIN
#  define INT_LEAST16_MIN @INT_LEAST16_MIN@
#endif

#ifndef INT_LEAST32_MIN
#  define INT_LEAST32_MIN @INT_LEAST32_MIN@
#endif

#ifndef INT_LEAST64_MIN
#  define INT_LEAST64_MIN @INT_LEAST64_MIN@
#endif

#ifndef INT_FAST8_MAX
#  define INT_FAST8_MAX @INT_FAST8_MAX@
#endif

#ifndef INT_FAST16_MAX
#  define INT_FAST16_MAX @INT_FAST16_MAX@
#endif

#ifndef INT_FAST32_MAX
#  define INT_FAST32_MAX @INT_FAST32_MAX@
#endif

#ifndef INT_FAST64_MAX
#  define INT_FAST64_MAX @INT_FAST64_MAX@
#endif

#ifndef UINT_FAST8_MAX
#  define UINT_FAST8_MAX @UINT_FAST8_MAX@
#endif

#ifndef UINT_FAST16_MAX
#  define UINT_FAST16_MAX @UINT_FAST16_MAX@
#endif

#ifndef UINT_FAST32_MAX
#  define UINT_FAST32_MAX @UINT_FAST32_MAX@
#endif

#ifndef UINT_FAST64_MAX
#  define UINT_FAST64_MAX @UINT_FAST64_MAX@
#endif

#ifndef INT_FAST8_MIN
#  define INT_FAST8_MIN @INT_FAST8_MIN@
#endif

#ifndef INT_FAST16_MIN
#  define INT_FAST16_MIN @INT_FAST16_MIN@
#endif

#ifndef INT_FAST32_MIN
#  define INT_FAST32_MIN @INT_FAST32_MIN@
#endif

#ifndef INT_FAST64_MIN
#  define INT_FAST64_MIN @INT_FAST64_MIN@
#endif

#ifndef INTPTR_MAX
#  define INTPTR_MAX @INTPTR_MAX@
#endif

#ifndef INTPTR_MIN
#  define INTPTR_MIN @INTPTR_MIN@
#endif

#ifndef UINTPTR_MAX
#  define UINTPTR_MAX @UINTPTR_MAX@
#endif

#ifndef INTMAX_MAX
#  define INTMAX_MAX @INTMAX_MAX@
#endif

#ifndef INTMAX_MIN
#  define INTMAX_MIN @INTMAX_MIN@
#endif

#ifndef UINTMAX_MAX
#  define UINTMAX_MAX @UINTMAX_MAX@
#endif

#ifndef PTRDIFF_MAX
#  define PTRDIFF_MAX @PTRDIFF_MAX@
#endif

#ifndef PTRDIFF_MIN
#  define PTRDIFF_MIN @PTRDIFF_MIN@
#endif

#ifndef SIZE_MAX
#  define SIZE_MAX @SIZE_MAX@
#endif

#if !@HAVE_INT8_T@
typedef @INT8_TYPE@ int8_t;
#endif

#if !@HAVE_INT16_T@
typedef @INT16_TYPE@ int16_t;
#endif

#if !@HAVE_INT32_T@
typedef @INT32_TYPE@ int32_t;
#endif

#if !@HAVE_INT64_T@
typedef @INT64_TYPE@ int64_t;
#endif

#if !@HAVE_UINT8_T@
typedef @UINT8_TYPE@ uint8_t;
#endif

#if !@HAVE_UINT16_T@
typedef @UINT16_TYPE@ uint16_t;
#endif

#if !@HAVE_UINT32_T@
typedef @UINT32_TYPE@ uint32_t;
#endif

#if !@HAVE_UINT64_T@
typedef @UINT64_TYPE@ uint64_t;
#endif

#if !@HAVE_INT_LEAST8_T@
typedef @INT_LEAST8_TYPE@ int_least8_t;
#endif

#if !@HAVE_INT_LEAST16_T@
typedef @INT_LEAST16_TYPE@ int_least16_t;
#endif

#if !@HAVE_INT_LEAST32_T@
typedef @INT_LEAST32_TYPE@ int_least32_t;
#endif

#if !@HAVE_INT_LEAST64_T@
typedef @INT_LEAST64_TYPE@ int_least64_t;
#endif

#if !@HAVE_UINT_LEAST8_T@
typedef @UINT_LEAST8_TYPE@ uint_least8_t;
#endif

#if !@HAVE_UINT_LEAST16_T@
typedef @UINT_LEAST16_TYPE@ uint_least16_t;
#endif

#if !@HAVE_UINT_LEAST32_T@
typedef @UINT_LEAST32_TYPE@ uint_least32_t;
#endif

#if !@HAVE_UINT_LEAST64_T@
typedef @UINT_LEAST64_TYPE@ uint_least64_t;
#endif

#if !@HAVE_INT_FAST8_T@
typedef @INT_FAST8_TYPE@ int_fast8_t;
#endif

#if !@HAVE_INT_FAST16_T@
typedef @INT_FAST16_TYPE@ int_fast16_t;
#endif

#if !@HAVE_INT_FAST32_T@
typedef @INT_FAST32_TYPE@ int_fast32_t;
#endif

#if !@HAVE_INT_FAST64_T@
typedef @INT_FAST64_TYPE@ int_fast64_t;
#endif

#if !@HAVE_UINT_FAST8_T@
typedef @UINT_FAST8_TYPE@ uint_fast8_t;
#endif

#if !@HAVE_UINT_FAST16_T@
typedef @UINT_FAST16_TYPE@ uint_fast16_t;
#endif

#if !@HAVE_UINT_FAST32_T@
typedef @UINT_FAST32_TYPE@ uint_fast32_t;
#endif

#if !@HAVE_UINT_FAST64_T@
typedef @UINT_FAST64_TYPE@ uint_fast64_t;
#endif

#if !@HAVE_INTPTR_T@
typedef @INTPTR_TYPE@ intptr_t;
#endif

#if !@HAVE_UINTPTR_T@
typedef @UINTPTR_TYPE@ uintptr_t;
#endif

#if !@HAVE_INTMAX_T@
typedef @INTMAX_TYPE@ intmax_t;
#endif

#if !@HAVE_UINTMAX_T@
typedef @UINTMAX_TYPE@ uintmax_t;
#endif

#endif /* COMPAT_STDINT_H */
