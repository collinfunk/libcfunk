/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_STDINT_H
#define COMPAT_STDINT_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_STDINT_H@
#  include_next <stdint.h>
#endif

#include <limits.h>

#ifndef INT8_WIDTH
#  define INT8_WIDTH 8
#endif

#ifndef INT16_WIDTH
#  define INT16_WIDTH 16
#endif

#ifndef INT32_WIDTH
#  define INT32_WIDTH 32
#endif

#ifndef INT64_WIDTH
#  define INT64_WIDTH 64
#endif

#ifndef UINT8_WIDTH
#  define UINT8_WIDTH 8
#endif

#ifndef UINT16_WIDTH
#  define UINT16_WIDTH 16
#endif

#ifndef UINT32_WIDTH
#  define UINT32_WIDTH 32
#endif

#ifndef UINT64_WIDTH
#  define UINT64_WIDTH 64
#endif

#ifndef INT_LEAST8_WIDTH
#  if @HAVE_INT_LEAST8_T@
#    define INT_LEAST8_WIDTH (@INT_LEAST8_T@ * CHAR_BIT)
#  else
#    define INT_LEAST8_WIDTH 8
#  endif
#endif

#ifndef INT_LEAST16_WIDTH
#  if @HAVE_INT_LEAST16_T@
#    define INT_LEAST16_WIDTH (@INT_LEAST16_T@ * CHAR_BIT)
#  else
#    define INT_LEAST16_WIDTH 16
#  endif
#endif

#ifndef INT_LEAST32_WIDTH
#  if @HAVE_INT_LEAST32_T@
#    define INT_LEAST32_WIDTH (@INT_LEAST32_T@ * CHAR_BIT)
#  else
#    define INT_LEAST32_WIDTH 32
#  endif
#endif

#ifndef INT_LEAST64_WIDTH
#  if @HAVE_INT_LEAST64_T@
#    define INT_LEAST64_WIDTH (@INT_LEAST64_T@ * CHAR_BIT)
#  else
#    define INT_LEAST64_WIDTH 64
#  endif
#endif

#ifndef UINT_LEAST8_WIDTH
#  if @HAVE_UINT_LEAST8_T@
#    define UINT_LEAST8_WIDTH (@UINT_LEAST8_T@ * CHAR_BIT)
#  else
#    define UINT_LEAST8_WIDTH INT_LEAST8_WIDTH
#  endif
#endif

#ifndef UINT_LEAST16_WIDTH
#  if @HAVE_UINT_LEAST16_T@
#    define UINT_LEAST16_WIDTH (@UINT_LEAST16_T@ * CHAR_BIT)
#  else
#    define UINT_LEAST16_WIDTH INT_LEAST16_WIDTH
#  endif
#endif

#ifndef UINT_LEAST32_WIDTH
#  if @HAVE_UINT_LEAST32_T@
#    define UINT_LEAST32_WIDTH (@UINT_LEAST32_T@ * CHAR_BIT)
#  else
#    define UINT_LEAST32_WIDTH INT_LEAST32_WIDTH
#  endif
#endif

#ifndef UINT_LEAST64_WIDTH
#  if @HAVE_UINT_LEAST64_T@
#    define UINT_LEAST64_WIDTH (@UINT_LEAST64_T@ * CHAR_BIT)
#  else
#    define UINT_LEAST64_WIDTH INT_LEAST64_WIDTH
#  endif
#endif

#ifndef INT_FAST8_WIDTH
#  if @HAVE_INT_FAST8_T@
#    define INT_FAST8_WIDTH (@INT_FAST8_T@ * CHAR_BIT)
#  else
#    define INT_FAST8_WIDTH 8
#  endif
#endif

#ifndef INT_FAST16_WIDTH
#  if @HAVE_INT_FAST16_T@
#    define INT_FAST16_WIDTH (@INT_FAST16_T@ * CHAR_BIT)
#  else
#    define INT_FAST16_WIDTH 16
#  endif
#endif

#ifndef INT_FAST32_WIDTH
#  if @HAVE_INT_FAST32_T@
#    define INT_FAST32_WIDTH (@INT_FAST32_T@ * CHAR_BIT)
#  else
#    define INT_FAST32_WIDTH 32
#  endif
#endif

#ifndef INT_FAST64_WIDTH
#  if @HAVE_INT_FAST64_T@
#    define INT_FAST64_WIDTH (@INT_FAST64_T@ * CHAR_BIT)
#  else
#    define INT_FAST64_WIDTH 64
#  endif
#endif

#ifndef UINT_FAST8_WIDTH
#  if @HAVE_UINT_FAST8_T@
#    define UINT_FAST8_WIDTH (@UINT_FAST8_T@ * CHAR_BIT)
#  else
#    define UINT_FAST8_WIDTH INT_FAST8_WIDTH
#  endif
#endif

#ifndef UINT_FAST16_WIDTH
#  if @HAVE_UINT_FAST16_T@
#    define UINT_FAST16_WIDTH (@UINT_FAST16_T@ * CHAR_BIT)
#  else
#    define UINT_FAST16_WIDTH INT_FAST16_WIDTH
#  endif
#endif

#ifndef UINT_FAST32_WIDTH
#  if @HAVE_UINT_FAST32_T@
#    define UINT_FAST32_WIDTH (@UINT_FAST32_T@ * CHAR_BIT)
#  else
#    define UINT_FAST32_WIDTH INT_FAST32_WIDTH
#  endif
#endif

#ifndef UINT_FAST64_WIDTH
#  if @HAVE_UINT_FAST64_T@
#    define UINT_FAST64_WIDTH (@UINT_FAST64_T@ * CHAR_BIT)
#  else
#    define UINT_FAST64_WIDTH INT_FAST64_WIDTH
#  endif
#endif

#ifndef INTPTR_WIDTH
#  if @HAVE_INTPTR_T@
#    define INTPTR_WIDTH (@INTPTR_T@ * CHAR_BIT)
#  else
#    define INTPTR_WIDTH (@CMAKE_SIZEOF_VOID_P@ * CHAR_BIT)
#  endif
#endif

#ifndef UINTPTR_WIDTH
#  if @HAVE_UINTPTR_T@
#    define UINTPTR_WIDTH (@UINTPTR_T@ * CHAR_BIT)
#  else
#    define UINTPTR_WIDTH INTPTR_WIDTH
#  endif
#endif

#ifndef INTMAX_WIDTH
#  if @HAVE_INTMAX_T@
#    define INTMAX_WIDTH (@INTMAX_T@ * CHAR_BIT)
#  else
#    define INTMAX_WIDTH INT64_WIDTH
#  endif
#endif

#ifndef UINTMAX_WIDTH
#  if @HAVE_UINTMAX_T@
#    define UINTMAX_WIDTH (@UINTMAX_T@ * CHAR_BIT)
#  else
#    define UINTMAX_WIDTH INTMAX_WIDTH
#  endif
#endif

#ifndef PTRDIFF_WIDTH
#  if @HAVE_PTRDIFF_T@
#    define PTRDIFF_WIDTH (@PTRDIFF_T@ * CHAR_BIT)
#  else
/* TODO */
#  endif
#endif

#ifndef SIG_ATOMIC_WIDTH
#  if @HAVE_SIG_ATOMIC_T@
#    define SIG_ATOMIC_WIDTH (@SIG_ATOMIC_T@ * CHAR_BIT)
#  else
/* TODO */
#  endif
#endif

#ifndef SIZE_WIDTH
#  if @HAVE_SIZE_T@
#    define SIZE_WIDTH (@SIZE_T@ * CHAR_BIT)
#  else
/* TODO */
#  endif
#endif

#ifndef WCHAR_WIDTH
#  if @HAVE_WCHAR_T@
#    define WCHAR_WIDTH (@WCHAR_T@ * CHAR_BIT)
#  else
/* TODO */
#  endif
#endif

#ifndef WINT_WIDTH
#  if @HAVE_WINT_T@
#    define WINT_WIDTH (@WINT_T@ * CHAR_BIT)
#  else
/* TODO */
#  endif
#endif

#ifndef INT8_MAX
#  if INT8_WIDTH == SCHAR_WIDTH
#    define INT8_MAX SCHAR_MAX
#  elif INT8_WIDTH == SHRT_WIDTH
#    define INT8_MAX SHRT_MAX
#  elif INT8_WIDTH == INT_WIDTH
#    define INT8_MAX INT_MAX
#  elif INT8_WIDTH == LONG_WIDTH
#    define INT8_MAX LONG_MAX
#  elif INT8_WIDTH == LLONG_WIDTH
#    define INT8_MAX LLONG_MAX
#  endif
#endif

#ifndef INT16_MAX
#  if INT16_WIDTH == SCHAR_WIDTH
#    define INT16_MAX SCHAR_MAX
#  elif INT16_WIDTH == SHRT_WIDTH
#    define INT16_MAX SHRT_MAX
#  elif INT16_WIDTH == INT_WIDTH
#    define INT16_MAX INT_MAX
#  elif INT16_WIDTH == LONG_WIDTH
#    define INT16_MAX LONG_MAX
#  elif INT16_WIDTH == LLONG_WIDTH
#    define INT16_MAX LLONG_MAX
#  endif
#endif

#ifndef INT32_MAX
#  if INT32_WIDTH == SCHAR_WIDTH
#    define INT32_MAX SCHAR_MAX
#  elif INT32_WIDTH == SHRT_WIDTH
#    define INT32_MAX SHRT_MAX
#  elif INT32_WIDTH == INT_WIDTH
#    define INT32_MAX INT_MAX
#  elif INT32_WIDTH == LONG_WIDTH
#    define INT32_MAX LONG_MAX
#  elif INT32_WIDTH == LLONG_WIDTH
#    define INT32_MAX LLONG_MAX
#  endif
#endif

#ifndef INT64_MAX
#  if INT64_WIDTH == SCHAR_WIDTH
#    define INT64_MAX SCHAR_MAX
#  elif INT64_WIDTH == SHRT_WIDTH
#    define INT64_MAX SHRT_MAX
#  elif INT64_WIDTH == INT_WIDTH
#    define INT64_MAX INT_MAX
#  elif INT64_WIDTH == LONG_WIDTH
#    define INT64_MAX LONG_MAX
#  elif INT64_WIDTH == LLONG_WIDTH
#    define INT64_MAX LLONG_MAX
#  endif
#endif

#ifndef UINT8_MAX
#  if UINT8_WIDTH == UCHAR_WIDTH
#    define UINT8_MAX UCHAR_MAX
#  elif UINT8_WIDTH == USHRT_WIDTH
#    define UINT8_MAX USHRT_MAX
#  elif UINT8_WIDTH == UINT_WIDTH
#    define UINT8_MAX UINT_MAX
#  elif UINT8_WIDTH == ULONG_WIDTH
#    define UINT8_MAX ULONG_MAX
#  elif UINT8_WIDTH == ULLONG_WIDTH
#    define UINT8_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT16_MAX
#  if UINT16_WIDTH == UCHAR_WIDTH
#    define UINT16_MAX UCHAR_MAX
#  elif UINT16_WIDTH == USHRT_WIDTH
#    define UINT16_MAX USHRT_MAX
#  elif UINT16_WIDTH == UINT_WIDTH
#    define UINT16_MAX UINT_MAX
#  elif UINT16_WIDTH == ULONG_WIDTH
#    define UINT16_MAX ULONG_MAX
#  elif UINT16_WIDTH == ULLONG_WIDTH
#    define UINT16_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT32_MAX
#  if UINT32_WIDTH == UCHAR_WIDTH
#    define UINT32_MAX UCHAR_MAX
#  elif UINT32_WIDTH == USHRT_WIDTH
#    define UINT32_MAX USHRT_MAX
#  elif UINT32_WIDTH == UINT_WIDTH
#    define UINT32_MAX UINT_MAX
#  elif UINT32_WIDTH == ULONG_WIDTH
#    define UINT32_MAX ULONG_MAX
#  elif UINT32_WIDTH == ULLONG_WIDTH
#    define UINT32_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT64_MAX
#  if UINT64_WIDTH == UCHAR_WIDTH
#    define UINT64_MAX UCHAR_MAX
#  elif UINT64_WIDTH == USHRT_WIDTH
#    define UINT64_MAX USHRT_MAX
#  elif UINT64_WIDTH == UINT_WIDTH
#    define UINT64_MAX UINT_MAX
#  elif UINT64_WIDTH == ULONG_WIDTH
#    define UINT64_MAX ULONG_MAX
#  elif UINT64_WIDTH == ULLONG_WIDTH
#    define UINT64_MAX ULLONG_MAX
#  endif
#endif

#ifndef INT8_MIN
#  if INT8_WIDTH == SCHAR_WIDTH
#    define INT8_MIN SCHAR_MIN
#  elif INT8_WIDTH == SHRT_WIDTH
#    define INT8_MIN SHRT_MIN
#  elif INT8_WIDTH == INT_WIDTH
#    define INT8_MIN INT_MIN
#  elif INT8_WIDTH == LONG_WIDTH
#    define INT8_MIN LONG_MIN
#  elif INT8_WIDTH == LLONG_WIDTH
#    define INT8_MIN LLONG_MIN
#  endif
#endif

#ifndef INT16_MIN
#  if INT16_WIDTH == SCHAR_WIDTH
#    define INT16_MIN SCHAR_MIN
#  elif INT16_WIDTH == SHRT_WIDTH
#    define INT16_MIN SHRT_MIN
#  elif INT16_WIDTH == INT_WIDTH
#    define INT16_MIN INT_MIN
#  elif INT16_WIDTH == LONG_WIDTH
#    define INT16_MIN LONG_MIN
#  elif INT16_WIDTH == LLONG_WIDTH
#    define INT16_MIN LLONG_MIN
#  endif
#endif

#ifndef INT32_MIN
#  if INT32_WIDTH == SCHAR_WIDTH
#    define INT32_MIN SCHAR_MIN
#  elif INT32_WIDTH == SHRT_WIDTH
#    define INT32_MIN SHRT_MIN
#  elif INT32_WIDTH == INT_WIDTH
#    define INT32_MIN INT_MIN
#  elif INT32_WIDTH == LONG_WIDTH
#    define INT32_MIN LONG_MIN
#  elif INT32_WIDTH == LLONG_WIDTH
#    define INT32_MIN LLONG_MIN
#  endif
#endif

#ifndef INT64_MIN
#  if INT64_WIDTH == SCHAR_WIDTH
#    define INT64_MIN SCHAR_MIN
#  elif INT64_WIDTH == SHRT_WIDTH
#    define INT64_MIN SHRT_MIN
#  elif INT64_WIDTH == INT_WIDTH
#    define INT64_MIN INT_MIN
#  elif INT64_WIDTH == LONG_WIDTH
#    define INT64_MIN LONG_MIN
#  elif INT64_WIDTH == LLONG_WIDTH
#    define INT64_MIN LLONG_MIN
#  endif
#endif

#ifndef INT_LEAST8_MAX
#  if INT_LEAST8_WIDTH == SCHAR_WIDTH
#    define INT_LEAST8_MAX SCHAR_MAX
#  elif INT_LEAST8_WIDTH == SHRT_WIDTH
#    define INT_LEAST8_MAX SHRT_MAX
#  elif INT_LEAST8_WIDTH == INT_WIDTH
#    define INT_LEAST8_MAX INT_MAX
#  elif INT_LEAST8_WIDTH == LONG_WIDTH
#    define INT_LEAST8_MAX LONG_MAX
#  elif INT_LEAST8_WIDTH == LLONG_WIDTH
#    define INT_LEAST8_MAX LLONG_MAX
#  endif
#endif

#ifndef INT_LEAST16_MAX
#  if INT_LEAST16_WIDTH == SCHAR_WIDTH
#    define INT_LEAST16_MAX SCHAR_MAX
#  elif INT_LEAST16_WIDTH == SHRT_WIDTH
#    define INT_LEAST16_MAX SHRT_MAX
#  elif INT_LEAST16_WIDTH == INT_WIDTH
#    define INT_LEAST16_MAX INT_MAX
#  elif INT_LEAST16_WIDTH == LONG_WIDTH
#    define INT_LEAST16_MAX LONG_MAX
#  elif INT_LEAST16_WIDTH == LLONG_WIDTH
#    define INT_LEAST16_MAX LLONG_MAX
#  endif
#endif

#ifndef INT_LEAST32_MAX
#  if INT_LEAST32_WIDTH == SCHAR_WIDTH
#    define INT_LEAST32_MAX SCHAR_MAX
#  elif INT_LEAST32_WIDTH == SHRT_WIDTH
#    define INT_LEAST32_MAX SHRT_MAX
#  elif INT_LEAST32_WIDTH == INT_WIDTH
#    define INT_LEAST32_MAX INT_MAX
#  elif INT_LEAST32_WIDTH == LONG_WIDTH
#    define INT_LEAST32_MAX LONG_MAX
#  elif INT_LEAST32_WIDTH == LLONG_WIDTH
#    define INT_LEAST32_MAX LLONG_MAX
#  endif
#endif

#ifndef INT_LEAST64_MAX
#  if INT_LEAST64_WIDTH == SCHAR_WIDTH
#    define INT_LEAST64_MAX SCHAR_MAX
#  elif INT_LEAST64_WIDTH == SHRT_WIDTH
#    define INT_LEAST64_MAX SHRT_MAX
#  elif INT_LEAST64_WIDTH == INT_WIDTH
#    define INT_LEAST64_MAX INT_MAX
#  elif INT_LEAST64_WIDTH == LONG_WIDTH
#    define INT_LEAST64_MAX LONG_MAX
#  elif INT_LEAST64_WIDTH == LLONG_WIDTH
#    define INT_LEAST64_MAX LLONG_MAX
#  endif
#endif

#ifndef UINT_LEAST8_MAX
#  if UINT_LEAST8_WIDTH == UCHAR_WIDTH
#    define UINT_LEAST8_MAX UCHAR_MAX
#  elif UINT_LEAST8_WIDTH == USHRT_WIDTH
#    define UINT_LEAST8_MAX USHRT_MAX
#  elif UINT_LEAST8_WIDTH == UINT_WIDTH
#    define UINT_LEAST8_MAX UINT_MAX
#  elif UINT_LEAST8_WIDTH == ULONG_WIDTH
#    define UINT_LEAST8_MAX ULONG_MAX
#  elif UINT_LEAST8_WIDTH == ULLONG_WIDTH
#    define UINT_LEAST8_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT_LEAST16_MAX
#  if UINT_LEAST16_WIDTH == UCHAR_WIDTH
#    define UINT_LEAST16_MAX UCHAR_MAX
#  elif UINT_LEAST16_WIDTH == USHRT_WIDTH
#    define UINT_LEAST16_MAX USHRT_MAX
#  elif UINT_LEAST16_WIDTH == UINT_WIDTH
#    define UINT_LEAST16_MAX UINT_MAX
#  elif UINT_LEAST16_WIDTH == ULONG_WIDTH
#    define UINT_LEAST16_MAX ULONG_MAX
#  elif UINT_LEAST16_WIDTH == ULLONG_WIDTH
#    define UINT_LEAST16_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT_LEAST32_MAX
#  if UINT_LEAST32_WIDTH == UCHAR_WIDTH
#    define UINT_LEAST32_MAX UCHAR_MAX
#  elif UINT_LEAST32_WIDTH == USHRT_WIDTH
#    define UINT_LEAST32_MAX USHRT_MAX
#  elif UINT_LEAST32_WIDTH == UINT_WIDTH
#    define UINT_LEAST32_MAX UINT_MAX
#  elif UINT_LEAST32_WIDTH == ULONG_WIDTH
#    define UINT_LEAST32_MAX ULONG_MAX
#  elif UINT_LEAST32_WIDTH == ULLONG_WIDTH
#    define UINT_LEAST32_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT_LEAST64_MAX
#  if UINT_LEAST64_WIDTH == UCHAR_WIDTH
#    define UINT_LEAST64_MAX UCHAR_MAX
#  elif UINT_LEAST64_WIDTH == USHRT_WIDTH
#    define UINT_LEAST64_MAX USHRT_MAX
#  elif UINT_LEAST64_WIDTH == UINT_WIDTH
#    define UINT_LEAST64_MAX UINT_MAX
#  elif UINT_LEAST64_WIDTH == ULONG_WIDTH
#    define UINT_LEAST64_MAX ULONG_MAX
#  elif UINT_LEAST64_WIDTH == ULLONG_WIDTH
#    define UINT_LEAST64_MAX ULLONG_MAX
#  endif
#endif

#ifndef INT_LEAST8_MIN
#  if INT_LEAST8_WIDTH == SCHAR_WIDTH
#    define INT_LEAST8_MIN SCHAR_MIN
#  elif INT_LEAST8_WIDTH == SHRT_WIDTH
#    define INT_LEAST8_MIN SHRT_MIN
#  elif INT_LEAST8_WIDTH == INT_WIDTH
#    define INT_LEAST8_MIN INT_MIN
#  elif INT_LEAST8_WIDTH == LONG_WIDTH
#    define INT_LEAST8_MIN LONG_MIN
#  elif INT_LEAST8_WIDTH == LLONG_WIDTH
#    define INT_LEAST8_MIN LLONG_MIN
#  endif
#endif

#ifndef INT_LEAST16_MIN
#  if INT_LEAST16_WIDTH == SCHAR_WIDTH
#    define INT_LEAST16_MIN SCHAR_MIN
#  elif INT_LEAST16_WIDTH == SHRT_WIDTH
#    define INT_LEAST16_MIN SHRT_MIN
#  elif INT_LEAST16_WIDTH == INT_WIDTH
#    define INT_LEAST16_MIN INT_MIN
#  elif INT_LEAST16_WIDTH == LONG_WIDTH
#    define INT_LEAST16_MIN LONG_MIN
#  elif INT_LEAST16_WIDTH == LLONG_WIDTH
#    define INT_LEAST16_MIN LLONG_MIN
#  endif
#endif

#ifndef INT_LEAST32_MIN
#  if INT_LEAST32_WIDTH == SCHAR_WIDTH
#    define INT_LEAST32_MIN SCHAR_MIN
#  elif INT_LEAST32_WIDTH == SHRT_WIDTH
#    define INT_LEAST32_MIN SHRT_MIN
#  elif INT_LEAST32_WIDTH == INT_WIDTH
#    define INT_LEAST32_MIN INT_MIN
#  elif INT_LEAST32_WIDTH == LONG_WIDTH
#    define INT_LEAST32_MIN LONG_MIN
#  elif INT_LEAST32_WIDTH == LLONG_WIDTH
#    define INT_LEAST32_MIN LLONG_MIN
#  endif
#endif

#ifndef INT_LEAST64_MIN
#  if INT_LEAST64_WIDTH == SCHAR_WIDTH
#    define INT_LEAST64_MIN SCHAR_MIN
#  elif INT_LEAST64_WIDTH == SHRT_WIDTH
#    define INT_LEAST64_MIN SHRT_MIN
#  elif INT_LEAST64_WIDTH == INT_WIDTH
#    define INT_LEAST64_MIN INT_MIN
#  elif INT_LEAST64_WIDTH == LONG_WIDTH
#    define INT_LEAST64_MIN LONG_MIN
#  elif INT_LEAST64_WIDTH == LLONG_WIDTH
#    define INT_LEAST64_MIN LLONG_MIN
#  endif
#endif

#ifndef INT_FAST8_MAX
#  if INT_FAST8_WIDTH == SCHAR_WIDTH
#    define INT_FAST8_MAX SCHAR_MAX
#  elif INT_FAST8_WIDTH == SHRT_WIDTH
#    define INT_FAST8_MAX SHRT_MAX
#  elif INT_FAST8_WIDTH == INT_WIDTH
#    define INT_FAST8_MAX INT_MAX
#  elif INT_FAST8_WIDTH == LONG_WIDTH
#    define INT_FAST8_MAX LONG_MAX
#  elif INT_FAST8_WIDTH == LLONG_WIDTH
#    define INT_FAST8_MAX LLONG_MAX
#  endif
#endif

#ifndef INT_FAST16_MAX
#  if INT_FAST16_WIDTH == SCHAR_WIDTH
#    define INT_FAST16_MAX SCHAR_MAX
#  elif INT_FAST16_WIDTH == SHRT_WIDTH
#    define INT_FAST16_MAX SHRT_MAX
#  elif INT_FAST16_WIDTH == INT_WIDTH
#    define INT_FAST16_MAX INT_MAX
#  elif INT_FAST16_WIDTH == LONG_WIDTH
#    define INT_FAST16_MAX LONG_MAX
#  elif INT_FAST16_WIDTH == LLONG_WIDTH
#    define INT_FAST16_MAX LLONG_MAX
#  endif
#endif

#ifndef INT_FAST32_MAX
#  if INT_FAST32_WIDTH == SCHAR_WIDTH
#    define INT_FAST32_MAX SCHAR_MAX
#  elif INT_FAST32_WIDTH == SHRT_WIDTH
#    define INT_FAST32_MAX SHRT_MAX
#  elif INT_FAST32_WIDTH == INT_WIDTH
#    define INT_FAST32_MAX INT_MAX
#  elif INT_FAST32_WIDTH == LONG_WIDTH
#    define INT_FAST32_MAX LONG_MAX
#  elif INT_FAST32_WIDTH == LLONG_WIDTH
#    define INT_FAST32_MAX LLONG_MAX
#  endif
#endif

#ifndef INT_FAST64_MAX
#  if INT_FAST64_WIDTH == SCHAR_WIDTH
#    define INT_FAST64_MAX SCHAR_MAX
#  elif INT_FAST64_WIDTH == SHRT_WIDTH
#    define INT_FAST64_MAX SHRT_MAX
#  elif INT_FAST64_WIDTH == INT_WIDTH
#    define INT_FAST64_MAX INT_MAX
#  elif INT_FAST64_WIDTH == LONG_WIDTH
#    define INT_FAST64_MAX LONG_MAX
#  elif INT_FAST64_WIDTH == LLONG_WIDTH
#    define INT_FAST64_MAX LLONG_MAX
#  endif
#endif

#ifndef UINT_FAST8_MAX
#  if UINT_FAST8_WIDTH == UCHAR_WIDTH
#    define UINT_FAST8_MAX UCHAR_MAX
#  elif UINT_FAST8_WIDTH == USHRT_WIDTH
#    define UINT_FAST8_MAX USHRT_MAX
#  elif UINT_FAST8_WIDTH == UINT_WIDTH
#    define UINT_FAST8_MAX UINT_MAX
#  elif UINT_FAST8_WIDTH == ULONG_WIDTH
#    define UINT_FAST8_MAX ULONG_MAX
#  elif UINT_FAST8_WIDTH == ULLONG_WIDTH
#    define UINT_FAST8_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT_FAST16_MAX
#  if UINT_FAST16_WIDTH == UCHAR_WIDTH
#    define UINT_FAST16_MAX UCHAR_MAX
#  elif UINT_FAST16_WIDTH == USHRT_WIDTH
#    define UINT_FAST16_MAX USHRT_MAX
#  elif UINT_FAST16_WIDTH == UINT_WIDTH
#    define UINT_FAST16_MAX UINT_MAX
#  elif UINT_FAST16_WIDTH == ULONG_WIDTH
#    define UINT_FAST16_MAX ULONG_MAX
#  elif UINT_FAST16_WIDTH == ULLONG_WIDTH
#    define UINT_FAST16_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT_FAST32_MAX
#  if UINT_FAST32_WIDTH == UCHAR_WIDTH
#    define UINT_FAST32_MAX UCHAR_MAX
#  elif UINT_FAST32_WIDTH == USHRT_WIDTH
#    define UINT_FAST32_MAX USHRT_MAX
#  elif UINT_FAST32_WIDTH == UINT_WIDTH
#    define UINT_FAST32_MAX UINT_MAX
#  elif UINT_FAST32_WIDTH == ULONG_WIDTH
#    define UINT_FAST32_MAX ULONG_MAX
#  elif UINT_FAST32_WIDTH == ULLONG_WIDTH
#    define UINT_FAST32_MAX ULLONG_MAX
#  endif
#endif

#ifndef UINT_FAST64_MAX
#  if UINT_FAST64_WIDTH == UCHAR_WIDTH
#    define UINT_FAST64_MAX UCHAR_MAX
#  elif UINT_FAST64_WIDTH == USHRT_WIDTH
#    define UINT_FAST64_MAX USHRT_MAX
#  elif UINT_FAST64_WIDTH == UINT_WIDTH
#    define UINT_FAST64_MAX UINT_MAX
#  elif UINT_FAST64_WIDTH == ULONG_WIDTH
#    define UINT_FAST64_MAX ULONG_MAX
#  elif UINT_FAST64_WIDTH == ULLONG_WIDTH
#    define UINT_FAST64_MAX ULLONG_MAX
#  endif
#endif

#ifndef INT_FAST8_MIN
#  if INT_FAST8_WIDTH == SCHAR_WIDTH
#    define INT_FAST8_MIN SCHAR_MIN
#  elif INT_FAST8_WIDTH == SHRT_WIDTH
#    define INT_FAST8_MIN SHRT_MIN
#  elif INT_FAST8_WIDTH == INT_WIDTH
#    define INT_FAST8_MIN INT_MIN
#  elif INT_FAST8_WIDTH == LONG_WIDTH
#    define INT_FAST8_MIN LONG_MIN
#  elif INT_FAST8_WIDTH == LLONG_WIDTH
#    define INT_FAST8_MIN LLONG_MIN
#  endif
#endif

#ifndef INT_FAST16_MIN
#  if INT_FAST16_WIDTH == SCHAR_WIDTH
#    define INT_FAST16_MIN SCHAR_MIN
#  elif INT_FAST16_WIDTH == SHRT_WIDTH
#    define INT_FAST16_MIN SHRT_MIN
#  elif INT_FAST16_WIDTH == INT_WIDTH
#    define INT_FAST16_MIN INT_MIN
#  elif INT_FAST16_WIDTH == LONG_WIDTH
#    define INT_FAST16_MIN LONG_MIN
#  elif INT_FAST16_WIDTH == LLONG_WIDTH
#    define INT_FAST16_MIN LLONG_MIN
#  endif
#endif

#ifndef INT_FAST32_MIN
#  if INT_FAST32_WIDTH == SCHAR_WIDTH
#    define INT_FAST32_MIN SCHAR_MIN
#  elif INT_FAST32_WIDTH == SHRT_WIDTH
#    define INT_FAST32_MIN SHRT_MIN
#  elif INT_FAST32_WIDTH == INT_WIDTH
#    define INT_FAST32_MIN INT_MIN
#  elif INT_FAST32_WIDTH == LONG_WIDTH
#    define INT_FAST32_MIN LONG_MIN
#  elif INT_FAST32_WIDTH == LLONG_WIDTH
#    define INT_FAST32_MIN LLONG_MIN
#  endif
#endif

#ifndef INT_FAST64_MIN
#  if INT_FAST64_WIDTH == SCHAR_WIDTH
#    define INT_FAST64_MIN SCHAR_MIN
#  elif INT_FAST64_WIDTH == SHRT_WIDTH
#    define INT_FAST64_MIN SHRT_MIN
#  elif INT_FAST64_WIDTH == INT_WIDTH
#    define INT_FAST64_MIN INT_MIN
#  elif INT_FAST64_WIDTH == LONG_WIDTH
#    define INT_FAST64_MIN LONG_MIN
#  elif INT_FAST64_WIDTH == LLONG_WIDTH
#    define INT_FAST64_MIN LLONG_MIN
#  endif
#endif

#ifndef INTPTR_MAX
#  if INTPTR_WIDTH == SCHAR_WIDTH
#    define INTPTR_MAX SCHAR_MAX
#  elif INTPTR_WIDTH == SHRT_WIDTH
#    define INTPTR_MAX SHRT_MAX
#  elif INTPTR_WIDTH == INT_WIDTH
#    define INTPTR_MAX INT_MAX
#  elif INTPTR_WIDTH == LONG_WIDTH
#    define INTPTR_MAX LONG_MAX
#  elif INTPTR_WIDTH == LLONG_WIDTH
#    define INTPTR_MAX LLONG_MAX
#  endif
#endif

#ifndef UINTPTR_MAX
#  if UINTPTR_WIDTH == UCHAR_WIDTH
#    define UINTPTR_MAX UCHAR_MAX
#  elif UINTPTR_WIDTH == USHRT_WIDTH
#    define UINTPTR_MAX USHRT_MAX
#  elif UINTPTR_WIDTH == UINT_WIDTH
#    define UINTPTR_MAX UINT_MAX
#  elif UINTPTR_WIDTH == ULONG_WIDTH
#    define UINTPTR_MAX ULONG_MAX
#  elif UINTPTR_WIDTH == ULLONG_WIDTH
#    define UINTPTR_MAX ULLONG_MAX
#  endif
#endif

#ifndef INTPTR_MIN
#  if INTPTR_WIDTH == SCHAR_WIDTH
#    define INTPTR_MIN SCHAR_MIN
#  elif INTPTR_WIDTH == SHRT_WIDTH
#    define INTPTR_MIN SHRT_MIN
#  elif INTPTR_WIDTH == INT_WIDTH
#    define INTPTR_MIN INT_MIN
#  elif INTPTR_WIDTH == LONG_WIDTH
#    define INTPTR_MIN LONG_MIN
#  elif INTPTR_WIDTH == LLONG_WIDTH
#    define INTPTR_MIN LLONG_MIN
#  endif
#endif

#ifndef INTMAX_MAX
#  if INTMAX_WIDTH == SCHAR_WIDTH
#    define INTMAX_MAX SCHAR_MAX
#  elif INTMAX_WIDTH == SHRT_WIDTH
#    define INTMAX_MAX SHRT_MAX
#  elif INTMAX_WIDTH == INT_WIDTH
#    define INTMAX_MAX INT_MAX
#  elif INTMAX_WIDTH == LONG_WIDTH
#    define INTMAX_MAX LONG_MAX
#  elif INTMAX_WIDTH == LLONG_WIDTH
#    define INTMAX_MAX LLONG_MAX
#  endif
#endif

#ifndef UINTMAX_MAX
#  if UINTMAX_WIDTH == UCHAR_WIDTH
#    define UINTMAX_MAX UCHAR_MAX
#  elif UINTMAX_WIDTH == USHRT_WIDTH
#    define UINTMAX_MAX USHRT_MAX
#  elif UINTMAX_WIDTH == UINT_WIDTH
#    define UINTMAX_MAX UINT_MAX
#  elif UINTMAX_WIDTH == ULONG_WIDTH
#    define UINTMAX_MAX ULONG_MAX
#  elif UINTMAX_WIDTH == ULLONG_WIDTH
#    define UINTMAX_MAX ULLONG_MAX
#  endif
#endif

#ifndef INTMAX_MIN
#  if INTMAX_WIDTH == SCHAR_WIDTH
#    define INTMAX_MIN SCHAR_MIN
#  elif INTMAX_WIDTH == SHRT_WIDTH
#    define INTMAX_MIN SHRT_MIN
#  elif INTMAX_WIDTH == INT_WIDTH
#    define INTMAX_MIN INT_MIN
#  elif INTMAX_WIDTH == LONG_WIDTH
#    define INTMAX_MIN LONG_MIN
#  elif INTMAX_WIDTH == LLONG_WIDTH
#    define INTMAX_MIN LLONG_MIN
#  endif
#endif

#ifndef PTRDIFF_MAX
#  if PTRDIFF_WIDTH == SCHAR_WIDTH
#    define PTRDIFF_MAX SCHAR_MAX
#  elif PTRDIFF_WIDTH == SHRT_WIDTH
#    define PTRDIFF_MAX SHRT_MAX
#  elif PTRDIFF_WIDTH == INT_WIDTH
#    define PTRDIFF_MAX INT_MAX
#  elif PTRDIFF_WIDTH == LONG_WIDTH
#    define PTRDIFF_MAX LONG_MAX
#  elif PTRDIFF_WIDTH == LLONG_WIDTH
#    define PTRDIFF_MAX LLONG_MAX
#  endif
#endif

#ifndef PTRDIFF_MIN
#  if PTRDIFF_WIDTH == SCHAR_WIDTH
#    define PTRDIFF_MIN SCHAR_MIN
#  elif PTRDIFF_WIDTH == SHRT_WIDTH
#    define PTRDIFF_MIN SHRT_MIN
#  elif PTRDIFF_WIDTH == INT_WIDTH
#    define PTRDIFF_MIN INT_MIN
#  elif PTRDIFF_WIDTH == LONG_WIDTH
#    define PTRDIFF_MIN LONG_MIN
#  elif PTRDIFF_WIDTH == LLONG_WIDTH
#    define PTRDIFF_MIN LLONG_MIN
#  endif
#endif

#ifndef SIZE_MAX
#  if SIZE_WIDTH == UCHAR_WIDTH
#    define SIZE_MAX UCHAR_MAX
#  elif SIZE_WIDTH == USHRT_WIDTH
#    define SIZE_MAX USHRT_MAX
#  elif SIZE_WIDTH == UINT_WIDTH
#    define SIZE_MAX UINT_MAX
#  elif SIZE_WIDTH == ULONG_WIDTH
#    define SIZE_MAX ULONG_MAX
#  elif SIZE_WIDTH == ULLONG_WIDTH
#    define SIZE_MAX ULLONG_MAX
#  endif
#endif

#ifndef INT8_C
#  if INT8_MAX == SCHAR_MAX
#    define INT8_C(x) x
#  elif INT8_MAX == SHRT_MAX
#    define INT8_C(x) x
#  elif INT8_MAX == INT_MAX
#    define INT8_C(x) x
#  elif INT8_MAX == LONG_MAX
#    define INT8_C(x) x ## L
#  elif INT8_MAX == LLONG_MAX
#    define INT8_C(x) x ## LL
#  endif
#endif

#ifndef INT16_C
#  if INT16_MAX == SCHAR_MAX
#    define INT16_C(x) x
#  elif INT16_MAX == SHRT_MAX
#    define INT16_C(x) x
#  elif INT16_MAX == INT_MAX
#    define INT16_C(x) x
#  elif INT16_MAX == LONG_MAX
#    define INT16_C(x) x ## L
#  elif INT16_MAX == LLONG_MAX
#    define INT16_C(x) x ## LL
#  endif
#endif

#ifndef INT32_C
#  if INT32_MAX == SCHAR_MAX
#    define INT32_C(x) x
#  elif INT32_MAX == SHRT_MAX
#    define INT32_C(x) x
#  elif INT32_MAX == INT_MAX
#    define INT32_C(x) x
#  elif INT32_MAX == LONG_MAX
#    define INT32_C(x) x ## L
#  elif INT32_MAX == LLONG_MAX
#    define INT32_C(x) x ## LL
#  endif
#endif

#ifndef INT64_C
#  if INT64_MAX == SCHAR_MAX
#    define INT64_C(x) x
#  elif INT64_MAX == SHRT_MAX
#    define INT64_C(x) x
#  elif INT64_MAX == INT_MAX
#    define INT64_C(x) x
#  elif INT64_MAX == LONG_MAX
#    define INT64_C(x) x ## L
#  elif INT64_MAX == LLONG_MAX
#    define INT64_C(x) x ## LL
#  endif
#endif

#ifndef UINT8_C
#  if UINT8_MAX == UCHAR_MAX
#    define UINT8_C(x) x
#  elif UINT8_MAX == USHRT_MAX
#    define UINT8_C(x) x
#  elif UINT8_MAX == UINT_MAX
#    define UINT8_C(x) x ## U
#  elif UINT8_MAX == ULONG_MAX
#    define UINT8_C(x) x ## UL
#  elif UINT8_MAX == ULLONG_MAX
#    define UINT8_C(x) x ## ULL
#  endif
#endif

#ifndef UINT16_C
#  if UINT16_MAX == UCHAR_MAX
#    define UINT16_C(x) x
#  elif UINT16_MAX == USHRT_MAX
#    define UINT16_C(x) x
#  elif UINT16_MAX == UINT_MAX
#    define UINT16_C(x) x ## U
#  elif UINT16_MAX == ULONG_MAX
#    define UINT16_C(x) x ## UL
#  elif UINT16_MAX == ULLONG_MAX
#    define UINT16_C(x) x ## ULL
#  endif
#endif

#ifndef UINT32_C
#  if UINT32_MAX == UCHAR_MAX
#    define UINT32_C(x) x
#  elif UINT32_MAX == USHRT_MAX
#    define UINT32_C(x) x
#  elif UINT32_MAX == UINT_MAX
#    define UINT32_C(x) x ## U
#  elif UINT32_MAX == ULONG_MAX
#    define UINT32_C(x) x ## UL
#  elif UINT32_MAX == ULLONG_MAX
#    define UINT32_C(x) x ## ULL
#  endif
#endif

#ifndef UINT64_C
#  if UINT64_MAX == UCHAR_MAX
#    define UINT64_C(x) x
#  elif UINT64_MAX == USHRT_MAX
#    define UINT64_C(x) x
#  elif UINT64_MAX == UINT_MAX
#    define UINT64_C(x) x ## U
#  elif UINT64_MAX == ULONG_MAX
#    define UINT64_C(x) x ## UL
#  elif UINT64_MAX == ULLONG_MAX
#    define UINT64_C(x) x ## ULL
#  endif
#endif

#ifndef INTMAX_C
#  if INTMAX_MAX == SCHAR_MAX
#    define INTMAX_C(x) x
#  elif INTMAX_MAX == SHRT_MAX
#    define INTMAX_C(x) x
#  elif INTMAX_MAX == INT_MAX
#    define INTMAX_C(x) x
#  elif INTMAX_MAX == LONG_MAX
#    define INTMAX_C(x) x ## L
#  elif INTMAX_MAX == LLONG_MAX
#    define INTMAX_C(x) x ## LL
#  endif
#endif

#ifndef UINTMAX_C
#  if UINTMAX_MAX == UCHAR_MAX
#    define UINTMAX_C(x) x
#  elif UINTMAX_MAX == USHRT_MAX
#    define UINTMAX_C(x) x
#  elif UINTMAX_MAX == UINT_MAX
#    define UINTMAX_C(x) x ## U
#  elif UINTMAX_MAX == ULONG_MAX
#    define UINTMAX_C(x) x ## UL
#  elif UINTMAX_MAX == ULLONG_MAX
#    define UINTMAX_C(x) x ## ULL
#  endif
#endif

#if !@HAVE_INT8_T@
#  if INT8_WIDTH == SCHAR_WIDTH
typedef signed char int8_t;
#  elif INT8_WIDTH == SHRT_WIDTH
typedef short int int8_t;
#  elif INT8_WIDTH == INT_WIDTH
typedef int int8_t;
#  elif INT8_WIDTH == LONG_WIDTH
typedef long int int8_t;
#  elif INT8_WIDTH == LLONG_WIDTH
typedef long long int int8_t;
#  endif
#endif

#if !@HAVE_INT16_T@
#  if INT16_WIDTH == SCHAR_WIDTH
typedef signed char int16_t;
#  elif INT16_WIDTH == SHRT_WIDTH
typedef short int int16_t;
#  elif INT16_WIDTH == INT_WIDTH
typedef int int16_t;
#  elif INT16_WIDTH == LONG_WIDTH
typedef long int int16_t;
#  elif INT16_WIDTH == LLONG_WIDTH
typedef long long int int16_t;
#  endif
#endif

#if !@HAVE_INT32_T@
#  if INT32_WIDTH == SCHAR_WIDTH
typedef signed char int32_t;
#  elif INT32_WIDTH == SHRT_WIDTH
typedef short int int32_t;
#  elif INT32_WIDTH == INT_WIDTH
typedef int int32_t;
#  elif INT32_WIDTH == LONG_WIDTH
typedef long int int32_t;
#  elif INT32_WIDTH == LLONG_WIDTH
typedef long long int int32_t;
#  endif
#endif

#if !@HAVE_INT64_T@
#  if INT64_WIDTH == SCHAR_WIDTH
typedef signed char int64_t;
#  elif INT64_WIDTH == SHRT_WIDTH
typedef short int int64_t;
#  elif INT64_WIDTH == INT_WIDTH
typedef int int64_t;
#  elif INT64_WIDTH == LONG_WIDTH
typedef long int int64_t;
#  elif INT64_WIDTH == LLONG_WIDTH
typedef long long int int64_t;
#  endif
#endif

#if !@HAVE_UINT8_T@
#  if UINT8_WIDTH == UCHAR_WIDTH
typedef unsigned char uint8_t;
#  elif UINT8_WIDTH == USHRT_WIDTH
typedef unsigned short int uint8_t;
#  elif UINT8_WIDTH == UINT_WIDTH
typedef unsigned int uint8_t;
#  elif UINT8_WIDTH == ULONG_WIDTH
typedef unsigned long int uint8_t;
#  elif UINT8_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint8_t;
#  endif
#endif

#if !@HAVE_UINT16_T@
#  if UINT16_WIDTH == UCHAR_WIDTH
typedef unsigned char uint16_t;
#  elif UINT16_WIDTH == USHRT_WIDTH
typedef unsigned short int uint16_t;
#  elif UINT16_WIDTH == UINT_WIDTH
typedef unsigned int uint16_t;
#  elif UINT16_WIDTH == ULONG_WIDTH
typedef unsigned long int uint16_t;
#  elif UINT16_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint16_t;
#  endif
#endif

#if !@HAVE_UINT32_T@
#  if UINT32_WIDTH == UCHAR_WIDTH
typedef unsigned char uint32_t;
#  elif UINT32_WIDTH == USHRT_WIDTH
typedef unsigned short int uint32_t;
#  elif UINT32_WIDTH == UINT_WIDTH
typedef unsigned int uint32_t;
#  elif UINT32_WIDTH == ULONG_WIDTH
typedef unsigned long int uint32_t;
#  elif UINT32_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint32_t;
#  endif
#endif

#if !@HAVE_UINT64_T@
#  if UINT64_WIDTH == UCHAR_WIDTH
typedef unsigned char uint64_t;
#  elif UINT64_WIDTH == USHRT_WIDTH
typedef unsigned short int uint64_t;
#  elif UINT64_WIDTH == UINT_WIDTH
typedef unsigned int uint64_t;
#  elif UINT64_WIDTH == ULONG_WIDTH
typedef unsigned long int uint64_t;
#  elif UINT64_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint64_t;
#  endif
#endif

#if !@HAVE_INT_LEAST8_T@
#  if INT_LEAST8_WIDTH == SCHAR_WIDTH
typedef signed char int_least8_t;
#  elif INT_LEAST8_WIDTH == SHRT_WIDTH
typedef short int int_least8_t;
#  elif INT_LEAST8_WIDTH == INT_WIDTH
typedef int int_least8_t;
#  elif INT_LEAST8_WIDTH == LONG_WIDTH
typedef long int int_least8_t;
#  elif INT_LEAST8_WIDTH == LLONG_WIDTH
typedef long long int int_least8_t;
#  endif
#endif

#if !@HAVE_INT_LEAST16_T@
#  if INT_LEAST16_WIDTH == SCHAR_WIDTH
typedef signed char int_least16_t;
#  elif INT_LEAST16_WIDTH == SHRT_WIDTH
typedef short int int_least16_t;
#  elif INT_LEAST16_WIDTH == INT_WIDTH
typedef int int_least16_t;
#  elif INT_LEAST16_WIDTH == LONG_WIDTH
typedef long int int_least16_t;
#  elif INT_LEAST16_WIDTH == LLONG_WIDTH
typedef long long int int_least16_t;
#  endif
#endif

#if !@HAVE_INT_LEAST32_T@
#  if INT_LEAST32_WIDTH == SCHAR_WIDTH
typedef signed char int_least32_t;
#  elif INT_LEAST32_WIDTH == SHRT_WIDTH
typedef short int int_least32_t;
#  elif INT_LEAST32_WIDTH == INT_WIDTH
typedef int int_least32_t;
#  elif INT_LEAST32_WIDTH == LONG_WIDTH
typedef long int int_least32_t;
#  elif INT_LEAST32_WIDTH == LLONG_WIDTH
typedef long long int int_least32_t;
#  endif
#endif

#if !@HAVE_INT_LEAST64_T@
#  if INT_LEAST64_WIDTH == SCHAR_WIDTH
typedef signed char int_least64_t;
#  elif INT_LEAST64_WIDTH == SHRT_WIDTH
typedef short int int_least64_t;
#  elif INT_LEAST64_WIDTH == INT_WIDTH
typedef int int_least64_t;
#  elif INT_LEAST64_WIDTH == LONG_WIDTH
typedef long int int_least64_t;
#  elif INT_LEAST64_WIDTH == LLONG_WIDTH
typedef long long int int_least64_t;
#  endif
#endif

#if !@HAVE_UINT_LEAST8_T@
#  if UINT_LEAST8_WIDTH == UCHAR_WIDTH
typedef unsigned char uint_least8_t;
#  elif UINT_LEAST8_WIDTH == USHRT_WIDTH
typedef unsigned short int uint_least8_t;
#  elif UINT_LEAST8_WIDTH == UINT_WIDTH
typedef unsigned int uint_least8_t;
#  elif UINT_LEAST8_WIDTH == ULONG_WIDTH
typedef unsigned long int uint_least8_t;
#  elif UINT_LEAST8_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint_least8_t;
#  endif
#endif

#if !@HAVE_UINT_LEAST16_T@
#  if UINT_LEAST16_WIDTH == UCHAR_WIDTH
typedef unsigned char uint_least16_t;
#  elif UINT_LEAST16_WIDTH == USHRT_WIDTH
typedef unsigned short int uint_least16_t;
#  elif UINT_LEAST16_WIDTH == UINT_WIDTH
typedef unsigned int uint_least16_t;
#  elif UINT_LEAST16_WIDTH == ULONG_WIDTH
typedef unsigned long int uint_least16_t;
#  elif UINT_LEAST16_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint_least16_t;
#  endif
#endif

#if !@HAVE_UINT_LEAST32_T@
#  if UINT_LEAST32_WIDTH == UCHAR_WIDTH
typedef unsigned char uint_least32_t;
#  elif UINT_LEAST32_WIDTH == USHRT_WIDTH
typedef unsigned short int uint_least32_t;
#  elif UINT_LEAST32_WIDTH == UINT_WIDTH
typedef unsigned int uint_least32_t;
#  elif UINT_LEAST32_WIDTH == ULONG_WIDTH
typedef unsigned long int uint_least32_t;
#  elif UINT_LEAST32_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint_least32_t;
#  endif
#endif

#if !@HAVE_UINT_LEAST64_T@
#  if UINT_LEAST64_WIDTH == UCHAR_WIDTH
typedef unsigned char uint_least64_t;
#  elif UINT_LEAST64_WIDTH == USHRT_WIDTH
typedef unsigned short int uint_least64_t;
#  elif UINT_LEAST64_WIDTH == UINT_WIDTH
typedef unsigned int uint_least64_t;
#  elif UINT_LEAST64_WIDTH == ULONG_WIDTH
typedef unsigned long int uint_least64_t;
#  elif UINT_LEAST64_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint_least64_t;
#  endif
#endif

#if !@HAVE_INT_FAST8_T@
#  if INT_FAST8_WIDTH == SCHAR_WIDTH
typedef signed char int_fast8_t;
#  elif INT_FAST8_WIDTH == SHRT_WIDTH
typedef short int int_fast8_t;
#  elif INT_FAST8_WIDTH == INT_WIDTH
typedef int int_fast8_t;
#  elif INT_FAST8_WIDTH == LONG_WIDTH
typedef long int int_fast8_t;
#  elif INT_FAST8_WIDTH == LLONG_WIDTH
typedef long long int int_fast8_t;
#  endif
#endif

#if !@HAVE_INT_FAST16_T@
#  if INT_FAST16_WIDTH == SCHAR_WIDTH
typedef signed char int_fast16_t;
#  elif INT_FAST16_WIDTH == SHRT_WIDTH
typedef short int int_fast16_t;
#  elif INT_FAST16_WIDTH == INT_WIDTH
typedef int int_fast16_t;
#  elif INT_FAST16_WIDTH == LONG_WIDTH
typedef long int int_fast16_t;
#  elif INT_FAST16_WIDTH == LLONG_WIDTH
typedef long long int int_fast16_t;
#  endif
#endif

#if !@HAVE_INT_FAST32_T@
#  if INT_FAST32_WIDTH == SCHAR_WIDTH
typedef signed char int_fast32_t;
#  elif INT_FAST32_WIDTH == SHRT_WIDTH
typedef short int int_fast32_t;
#  elif INT_FAST32_WIDTH == INT_WIDTH
typedef int int_fast32_t;
#  elif INT_FAST32_WIDTH == LONG_WIDTH
typedef long int int_fast32_t;
#  elif INT_FAST32_WIDTH == LLONG_WIDTH
typedef long long int int_fast32_t;
#  endif
#endif

#if !@HAVE_INT_FAST64_T@
#  if INT_FAST64_WIDTH == SCHAR_WIDTH
typedef signed char int_fast64_t;
#  elif INT_FAST64_WIDTH == SHRT_WIDTH
typedef short int int_fast64_t;
#  elif INT_FAST64_WIDTH == INT_WIDTH
typedef int int_fast64_t;
#  elif INT_FAST64_WIDTH == LONG_WIDTH
typedef long int int_fast64_t;
#  elif INT_FAST64_WIDTH == LLONG_WIDTH
typedef long long int int_fast64_t;
#  endif
#endif

#if !@HAVE_UINT_FAST8_T@
#  if UINT_FAST8_WIDTH == UCHAR_WIDTH
typedef unsigned char uint_fast8_t;
#  elif UINT_FAST8_WIDTH == USHRT_WIDTH
typedef unsigned short int uint_fast8_t;
#  elif UINT_FAST8_WIDTH == UINT_WIDTH
typedef unsigned int uint_fast8_t;
#  elif UINT_FAST8_WIDTH == ULONG_WIDTH
typedef unsigned long int uint_fast8_t;
#  elif UINT_FAST8_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint_fast8_t;
#  endif
#endif

#if !@HAVE_UINT_FAST16_T@
#  if UINT_FAST16_WIDTH == UCHAR_WIDTH
typedef unsigned char uint_fast16_t;
#  elif UINT_FAST16_WIDTH == USHRT_WIDTH
typedef unsigned short int uint_fast16_t;
#  elif UINT_FAST16_WIDTH == UINT_WIDTH
typedef unsigned int uint_fast16_t;
#  elif UINT_FAST16_WIDTH == ULONG_WIDTH
typedef unsigned long int uint_fast16_t;
#  elif UINT_FAST16_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint_fast16_t;
#  endif
#endif

#if !@HAVE_UINT_FAST32_T@
#  if UINT_FAST32_WIDTH == UCHAR_WIDTH
typedef unsigned char uint_fast32_t;
#  elif UINT_FAST32_WIDTH == USHRT_WIDTH
typedef unsigned short int uint_fast32_t;
#  elif UINT_FAST32_WIDTH == UINT_WIDTH
typedef unsigned int uint_fast32_t;
#  elif UINT_FAST32_WIDTH == ULONG_WIDTH
typedef unsigned long int uint_fast32_t;
#  elif UINT_FAST32_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint_fast32_t;
#  endif
#endif

#if !@HAVE_UINT_FAST64_T@
#  if UINT_FAST64_WIDTH == UCHAR_WIDTH
typedef unsigned char uint_fast64_t;
#  elif UINT_FAST64_WIDTH == USHRT_WIDTH
typedef unsigned short int uint_fast64_t;
#  elif UINT_FAST64_WIDTH == UINT_WIDTH
typedef unsigned int uint_fast64_t;
#  elif UINT_FAST64_WIDTH == ULONG_WIDTH
typedef unsigned long int uint_fast64_t;
#  elif UINT_FAST64_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uint_fast64_t;
#  endif
#endif

#if !@HAVE_INTPTR_T@
#  if INTPTR_WIDTH == SCHAR_WIDTH
typedef signed char intptr_t;
#  elif INTPTR_WIDTH == SHRT_WIDTH
typedef short int intptr_t;
#  elif INTPTR_WIDTH == INT_WIDTH
typedef int intptr_t;
#  elif INTPTR_WIDTH == LONG_WIDTH
typedef long int intptr_t;
#  elif INTPTR_WIDTH == LLONG_WIDTH
typedef long long int intptr_t;
#  endif
#endif

#if !@HAVE_UINTPTR_T@
#  if UINTPTR_WIDTH == UCHAR_WIDTH
typedef unsigned char uintptr_t;
#  elif UINTPTR_WIDTH == USHRT_WIDTH
typedef unsigned short int uintptr_t;
#  elif UINTPTR_WIDTH == UINT_WIDTH
typedef unsigned int uintptr_t;
#  elif UINTPTR_WIDTH == ULONG_WIDTH
typedef unsigned long int uintptr_t;
#  elif UINTPTR_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uintptr_t;
#  endif
#endif

#if !@HAVE_INTMAX_T@
#  if INTMAX_WIDTH == SCHAR_WIDTH
typedef signed char intmax_t;
#  elif INTMAX_WIDTH == SHRT_WIDTH
typedef short int intmax_t;
#  elif INTMAX_WIDTH == INT_WIDTH
typedef int intmax_t;
#  elif INTMAX_WIDTH == LONG_WIDTH
typedef long int intmax_t;
#  elif INTMAX_WIDTH == LLONG_WIDTH
typedef long long int intmax_t;
#  endif
#endif

#if !@HAVE_UINTMAX_T@
#  if UINTMAX_WIDTH == UCHAR_WIDTH
typedef unsigned char uintmax_t;
#  elif UINTMAX_WIDTH == USHRT_WIDTH
typedef unsigned short int uintmax_t;
#  elif UINTMAX_WIDTH == UINT_WIDTH
typedef unsigned int uintmax_t;
#  elif UINTMAX_WIDTH == ULONG_WIDTH
typedef unsigned long int uintmax_t;
#  elif UINTMAX_WIDTH == ULLONG_WIDTH
typedef unsigned long long int uintmax_t;
#  endif
#endif

#endif /* COMPAT_STDINT_H */
