/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_UNISTD_H
#define COMPAT_UNISTD_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_UNISTD_H@
#  include_next <unistd.h>
#endif

#include <sys/types.h>

#include <stddef.h>
#include <stdlib.h>
#include <stdarg.h>
#include <stdint.h>

/* Windows gethostname declaration. */
#if @HAVE_WINSOCK2_H@
#  include <winsock2.h>
#  include <windows.h>
#endif

/* Windows. */
#if @HAVE_IO_H@
#  include <io.h>
#endif

/* Windows. */
#if @HAVE_DIRECT_H@
#  include <direct.h>
#endif

#ifndef STDIN_FILENO
#  define STDIN_FILENO 0
#endif

#ifndef STDOUT_FILENO
#  define STDOUT_FILENO 1
#endif

#ifndef STDERR_FILENO
#  define STDERR_FILENO 2
#endif

#ifndef F_OK
#  define F_OK 0
#endif

#ifndef X_OK
#  define X_OK 1
#endif

#ifndef W_OK
#  define W_OK 2
#endif

#ifndef R_OK
#  define R_OK 4
#endif

#if @LIBCFUNK_DECLARE_ACCESS@
#  if !@HAVE_ACCESS@
extern int access (const char *path, int mode);
#  endif
#endif

#if @LIBCFUNK_DECLARE_CHDIR@
#  if @LIBCFUNK_REPLACE_CHDIR@
#    undef chdir
#    define chdir _libcfunk_chdir
extern int _libcfunk_chdir (const char *path);
#  elif !@HAVE_CHDIR@
extern int chdir (const char *path);
#  endif
#endif

#if @LIBCFUNK_DECLARE_CHOWN@
#  if !@HAVE_CHOWN@
extern int chown (const char *path, uid_t owner, gid_t group);
#  endif
#endif

#if @LIBCFUNK_DECLARE_CLOSE@
#  if !@HAVE_CLOSE@
extern int close (int fd);
#  endif
#endif

#if @LIBCFUNK_DECLARE_COPY_FILE_RANGE@
#  if !@HAVE_COPY_FILE_RANGE@
extern ssize_t copy_file_range (int fd_in, off_t *off_in, int fd_out,
                                off_t *off_out, size_t len,
                                unsigned int flags);
#  endif
#endif

#if @LIBCFUNK_DECLARE_DAEMON@
#  if !@HAVE_DAEMON@
extern int daemon (int nochdir, int noclose);
#  endif
#endif

#if @LIBCFUNK_DECLARE_DUP@
#  if @LIBCFUNK_REPLACE_DUP@
#    undef dup
#    define dup _libcfunk_dup
extern int _libcfunk_dup (int fd);
#  elif !@HAVE_DUP@
extern int dup (int fd);
#  endif
#endif

#if @LIBCFUNK_DECLARE_DUP2@
#  if @LIBCFUNK_REPLACE_DUP2@
#    undef dup2
#    define dup2 _libcfunk_dup2
extern int _libcfunk_dup2 (int fd1, int fd2);
#  elif !@HAVE_DUP2@
extern int dup2 (int fd1, int fd2);
#  endif
#endif

#if @LIBCFUNK_DECLARE_EACCESS@
#  if !@HAVE_EACCESS@
extern int eaccess (const char *pathname, int mode);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ENDUSERSHELL@
#  if !@HAVE_ENDUSERSHELL@
extern void endusershell (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ENVIRON@
#  if !@HAVE_ENVIRON@
#    if @HAVE_CRT_EXTERNS_H@ && @HAVE__NSGETENVIRON@
#      include <crt_externs.h>
#      define environ (*_NSGetEnviron ())
#    else
extern char **environ;
#    endif
#  endif
#endif

#if @LIBCFUNK_DECLARE_EUIDACCESS@
#  if !@HAVE_EUIDACCESS@
extern int euidaccess (const char *pathname, int mode);
#  endif
#endif

#if @LIBCFUNK_DECLARE_EXECL@
#  if !@HAVE_EXECL@
extern int execl (const char *path, const char *arg0, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_EXECLE@
#  if !@HAVE_EXECLE@
extern int execle (const char *path, const char *arg0, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_EXECLP@
#  if !@HAVE_EXECLP@
extern int execlp (const char *file, const char *arg0, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_EXECV@
#  if !@HAVE_EXECV@
extern int execv (const char *path, char *const argv[]);
#  endif
#endif

#if @LIBCFUNK_DECLARE_EXECVP@
#  if !@HAVE_EXECVP@
extern int execvp (const char *file, char *const argv[]);
#  endif
#endif

#if @LIBCFUNK_DECLARE_EXECVPE@
#  if !@HAVE_EXECVPE@
extern int execvpe (const char *file, char *const argv[], char *const envp[]);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FCHDIR@
#  if !@HAVE_FCHDIR@
extern int fchdir (int fd);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FDATASYNC@
#  if @LIBCFUNK_REPLACE_FDATASYNC@
#  elif !@HAVE_FDATASYNC@
extern int fdatasync (int fd);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FSYNC@
#  if !@HAVE_FSYNC@
extern int fsync (int fd);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FTRUNCATE@
#  if @LIBCFUNK_REPLACE_FTRUNCATE@
#    undef ftruncate
#    define ftruncate _libcfunk_ftruncate
extern int _libcfunk_ftruncate (int fd, off_t length);
#  elif !@HAVE_FTRUNCATE@
extern int ftruncate (int fd, off_t length);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GET_CURRENT_DIR_NAME@
#  if @LIBCFUNK_REPLACE_GET_CURRENT_DIR_NAME@
#    undef get_current_dir_name
#    define get_current_dir_name _libcfunk_get_current_dir_name
extern char *_libcfunk_get_current_dir_name (void);
#  elif !@HAVE_GET_CURRENT_DIR_NAME@
extern char *get_current_dir_name (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETCWD@
#  if @LIBCFUNK_REPLACE_GETCWD@
#    undef getcwd
#    define getcwd _libcfunk_getcwd
extern char *_libcfunk_getcwd (char *buf, size_t size);
#  elif !@HAVE_GETCWD@
extern char *getcwd (char *buf, size_t size);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETDTABLESIZE@
#  if @LIBCFUNK_REPLACE_GETDTABLESIZE@
#    undef getdtablesize
#    define getdtablesize _libcfunk_getdtablesize
extern int _libcfunk_getdtablesize (void);
#  elif !@HAVE_GETDTABLESIZE@
extern int getdtablesize (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETENTROPY@
#  if @LIBCFUNK_REPLACE_GETENTROPY@
#    undef getentropy
#    define getentropy _libcfunk_getentropy
extern int _libcfunk_getentropy (void *buffer, size_t length);
#  elif !@HAVE_GETENTROPY@
extern int getentropy (void *buffer, size_t length);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETGROUPS@
#  if !@HAVE_GETGROUPS@
extern int getgroups (int gidsetsize, gid_t grouplist[]);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETHOSTNAME@
#  if @LIBCFUNK_REPLACE_GETHOSTNAME@
#    undef gethostname
#    define gethostname _libcfunk_gethostname
extern int _libcfunk_gethostname (char *name, size_t name_len);
#  elif !@HAVE_GETHOSTNAME@
extern int gethostname (char *name, size_t name_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETLOGIN@
#  if !@HAVE_GETLOGIN@
extern char *getlogin (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETLOGIN_R@
#  if !@HAVE_GETLOGIN_R@
extern int getlogin_r (char *name, size_t namesize);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETPAGESIZE@
#  if @LIBCFUNK_REPLACE_GETPAGESIZE@
#    undef getpagesize
#    define getpagesize _libcfunk_getpagesize
extern int _libcfunk_getpagesize (void);
#  elif !@HAVE_GETPAGESIZE@
extern int getpagesize (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETUSERSHELL@
#  if !@HAVE_GETUSERSHELL@
extern char *getusershell (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GROUP_MEMBER@
#  if !@HAVE_GROUP_MEMBER@
extern int group_member (gid_t gid);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ISATTY@
#  if @LIBCFUNK_REPLACE_ISATTY@
#    undef isatty
#    define isatty _libcfunk_isatty
extern int _libcfunk_isatty (int fd);
#  elif !@HAVE_ISATTY@
extern int isatty (int fd);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LCHOWN@
#  if !@HAVE_LCHOWN@
extern int lchown (const char *path, uid_t owner, gid_t group);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LSEEK@
#  if @LIBCFUNK_REPLACE_LSEEK@
#    undef lseek
#    define lseek _libcfunk_lseek
extern off_t _libcfunk_lseek (int fd, off_t offset, int whence);
#  elif !@HAVE_LSEEK@
extern off_t lseek (int fd, off_t offset, int whence);
#  endif
#endif

#if @LIBCFUNK_DECLARE_PIPE@
#  if !@HAVE_PIPE@
extern int pipe (int fd[2]);
#  endif
#endif

#if @LIBCFUNK_DECLARE_PREAD@
#  if !@HAVE_PREAD@
extern ssize_t pread (int fd, void *buffer, size_t nbyte, off_t offset);
#  endif
#endif

#if @LIBCFUNK_DECLARE_PWRITE@
#  if !@HAVE_PWRITE@
extern ssize_t pwrite (int fd, const void *buffer, size_t nbyte, off_t offset);
#  endif
#endif

#if @LIBCFUNK_DECLARE_READ@
#  if !@HAVE_READ@
extern ssize_t read (int fd, void *buffer, size_t nbytes);
#  endif
#endif

#if @LIBCFUNK_DECLARE_READLINK@
#  if !@HAVE_READLINK@
extern ssize_t readlink (const char *path, char *buffer, size_t bufsize);
#  endif
#endif

#if @LIBCFUNK_DECLARE_RMDIR@
#  if @LIBCFUNK_REPLACE_RMDIR@
#    undef rmdir
#    define rmdir _libcfunk_rmdir
extern int _libcfunk_rmdir (const char *path);
#  elif !@HAVE_RMDIR@
extern int rmdir (const char *path);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SETUSERSHELL@
#  if !@HAVE_SETUSERSHELL@
extern void setusershell (void);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SLEEP@
#  if !@HAVE_SLEEP@
extern unsigned int sleep (unsigned int seconds);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SWAB@
#  if !@HAVE_SWAB@
extern void swab (const void *src, void *dest, ssize_t nbytes);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SYMLINK@
#  if !@HAVE_SYMLINK@
extern int symlink (const char *path1, const char *path2);
#  endif
#endif

#if @LIBCFUNK_DECLARE_TRUNCATE@
#  if !@HAVE_TRUNCATE@
extern int truncate (const char *path, off_t length);
#  endif
#endif

#if @LIBCFUNK_DECLARE_TTYNAME_R@
#  if !@HAVE_TTYNAME_R@
extern int ttyname_r (int fd, char *buffer, size_t buffer_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_UNLINK@
#  if !@HAVE_UNLINK@
extern int unlink (const char *path);
#  endif
#endif

#if @LIBCFUNK_DECLARE_USLEEP@
#  if !@HAVE_USLEEP@
extern int usleep (useconds_t useconds);
#  endif
#endif

#if @LIBCFUNK_DECLARE_WRITE@
#  if !@HAVE_WRITE@
extern ssize_t write (int fd, const void *buffer, size_t nbytes);
#  endif
#endif

#endif /* COMPAT_UNISTD_H */
