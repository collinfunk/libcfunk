/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_GLOB_H
#define COMPAT_GLOB_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_GLOB_H@
#  if @HAVE_INCLUDE_NEXT@
#    include_next <glob.h>
#  else
#    include "@GLOB_H_PATH@"
#  endif
#endif

#include <sys/types.h>

#if !@HAVE_GLOB_T@
typedef struct
{
  size_t gl_pathc;
  char **gl_pathv;
  size_t gl_offs;
} glob_t;
#endif

/* TODO: Implement. */

#if @LIBCFUNK_DECLARE_GLOB@
#  if @LIBCFUNK_REPLACE_GLOB@
#    undef glob
#    define glob _libcfunk_glob
extern int _libcfunk_glob (const char *restrict pattern, int flags,
                           int (*errfunc) (const char *epath, int eerrno),
                           glob_t *restrict pglob);
#  elif !@HAVE_GLOB@
extern int glob (const char *restrict pattern, int flags,
                 int (*errfunc) (const char *epath, int eerrno),
                 glob_t *restrict pglob);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GLOBFREE@
#  if @LIBCFUNK_REPLACE_GLOBFREE@
#    undef globfree
#    define globfree _libcfunk_globfree
extern void _libcfunk_globfree (glob_t *pglob);
#  elif !@HAVE_GLOBFREE@
extern void globfree (glob_t *pglob);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GLOB_PATTERN_P@
#  if @LIBCFUNK_REPLACE_GLOB_PATTERN_P@
#    undef glob_pattern_p
#    define glob_pattern_p _libcfunk_glob_pattern_p
extern int _libcfunk_glob_pattern_p (const char *pattern, int quote);
#  elif !@HAVE_GLOB_PATTERN_P@
extern int glob_pattern_p (const char *pattern, int quote);
#  endif
#endif

#endif /* COMPAT_GLOB_H */
