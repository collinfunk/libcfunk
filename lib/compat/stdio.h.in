/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_STDIO_H
#define COMPAT_STDIO_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_STDIO_H@
#  include_next <stdio.h>
#endif

#include <sys/types.h>
#include <stddef.h>
#include <stdarg.h>

#if @HAVE_IO_H@
#  include <io.h>
#endif

#if @LIBCFUNK_UNLOCKED_STDIO@
#  if !@HAVE_FLOCKFILE@
#    if @HAVE__LOCK_FILE@
#      define flockfile(stream) _lock_file ((stream))
#    else
#      define flockfile(stream)
#    endif
#  endif
#endif

#if @LIBCFUNK_UNLOCKED_STDIO@
#  if !@HAVE_FUNLOCKFILE@
#    if @HAVE__UNLOCK_FILE@
#      define funlockfile(stream) _unlock_file ((stream))
#    else
#      define funlockfile(stream)
#    endif
#  endif
#endif

#if @LIBCFUNK_UNLOCKED_STDIO@
#  if !@HAVE_GETC_UNLOCKED@
#    if @HAVE__GETC_NOLOCK@
#      define getc_unlocked(stream) _getc_nolock ((stream))
#    else
#      define getc_unlocked(stream) getc ((stream))
#    endif
#  endif
#endif

#if @LIBCFUNK_UNLOCKED_STDIO@
#  if !@HAVE_GETCHAR_UNLOCKED@
#    if @HAVE__GETCHAR_NOLOCK@
#      define getchar_unlocked() _getchar_nolock ()
#    else
#      define getchar_unlocked() getchar ()
#    endif
#  endif
#endif

#if @LIBCFUNK_UNLOCKED_STDIO@
#  if !@HAVE_PUTC_UNLOCKED@
#    if @HAVE__PUTC_NOLOCK@
#      define putc_unlocked(ch, stream) _putc_nolock ((ch), (stream))
#    else
#      define putc_unlocked(ch, stream) putc ((ch), (stream))
#    endif
#  endif
#endif

#if @LIBCFUNK_UNLOCKED_STDIO@
#  if !@HAVE_PUTCHAR_UNLOCKED@
#    if @HAVE__PUTCHAR_NOLOCK@
#      define putchar_unlocked(ch) _putchar_nolock ((ch))
#    else
#      define putchar_unlocked(ch) putchar ((ch))
#    endif
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_ASPRINTF@
#  if @LIBCFUNK_REPLACE_ASPRINTF@
#  elif !@HAVE_ASPRINTF@
extern int asprintf (char **restrict strp, const char *restrict format, ...);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_DPRINTF@
#  if @LIBCFUNK_REPLACE_DPRINTF@
#  elif !@HAVE_DPRINTF@
extern int dprintf (int fildes, const char *restrict format, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FILENO@
#  if @LIBCFUNK_REPLACE_FILENO@
#    undef fileno
#    define fileno _libcfunk_fileno
extern int _libcfunk_fileno (FILE *stream);
#  elif !@HAVE_FILENO@
extern int fileno (FILE *stream);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_FPRINTF@
#  if @LIBCFUNK_REPLACE_FPRINTF@
#  elif !@HAVE_FPRINTF@
extern int fprintf (FILE *restrict stream, const char *restrict format, ...);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FSEEK@
#  if @LIBCFUNK_REPLACE_FSEEK@
#    undef fseek
#    define fseek _libcfunk_fseek
extern int _libcfunk_fseek (FILE *stream, long offset, int whence);
#  elif !@HAVE_FSEEK@
extern int fseek (FILE *stream, long offset, int whence);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FSEEKO@
#  if @LIBCFUNK_REPLACE_FSEEKO@
#    undef fseeko
#    define fseeko _libcfunk_fseeko
extern int _libcfunk_fseeko (FILE *stream, off_t offset, int whence);
#  elif !@HAVE_FSEEKO@
extern int fseeko (FILE *stream, off_t offset, int whence);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FTELL@
#  if @LIBCFUNK_REPLACE_FTELL@
#    undef ftell
#    define ftell _libcfunk_ftell
extern long int _libcfunk_ftell (FILE *stream);
#  elif !@HAVE_FTELL@
extern long int ftell (FILE *stream);
# endif
#endif

#if @LIBCFUNK_DECLARE_FTELLO@
#  if @LIBCFUNK_REPLACE_FTELLO@
#    undef ftello
#    define ftello _libcfunk_ftello
extern off_t _libcfunk_ftello (FILE *stream);
#  elif !@HAVE_FTELLO@
extern off_t ftello (FILE *stream);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETDELIM@
#  if @LIBCFUNK_REPLACE_GETDELIM@
#    undef getdelim
#    define getdelim _libcfunk_getdelim
extern ssize_t _libcfunk_getdelim (char **restrict lineptr, size_t *restrict n,
                                   int delimiter, FILE *restrict stream);
#  elif !@HAVE_GETDELIM@
extern ssize_t getdelim (char **restrict lineptr, size_t *restrict n,
                         int delimiter, FILE *restrict stream);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETLINE@
#  if @LIBCFUNK_REPLACE_GETLINE@
#    undef getline
#    define getline _libcfunk_getline
extern ssize_t _libcfunk_getline (char **restrict lineptr, size_t *restrict n,
                                  FILE *restrict stream);
#  elif !@HAVE_GETLINE@
extern ssize_t getline (char **restrict lineptr, size_t *restrict n,
                        FILE *restrict stream);
#  endif
#endif

#if @LIBCFUNK_DECLARE_PCLOSE@
#  if @LIBCFUNK_REPLACE_PCLOSE@
#    undef pclose
#    define pclose _libcfunk_pclose
extern int _libcfunk_pclose (FILE *stream);
#  elif !@HAVE_PCLOSE@
extern int pclose (FILE *stream);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POPEN@
#  if @LIBCFUNK_REPLACE_POPEN@
#    undef popen
#    define popen _libcfunk_popen
extern FILE *_libcfunk_popen (const char *command, const char *mode);
#  elif !@HAVE_POPEN@
extern FILE *popen (const char *command, const char *mode);
#  endif
#endif

#if @LIBCFUNK_DECLARE_REMOVE@
#  if @LIBCFUNK_REPLACE_REMOVE@
#    undef remove
#    define remove _libcfunk_remove
extern int _libcfunk_remove (const char *path);
#  elif !@HAVE_REMOVE@
extern int remove (const char *path);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_SNPRINTF@
#  if @LIBCFUNK_REPLACE_SNPRINTF@
#  elif !@HAVE_SNPRINTF@
extern int snprintf (char *restrict s, size_t n,
                     const char *restrict format, ...);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_SPRINTF@
#  if @LIBCFUNK_REPLACE_SPRINTF@
#  elif !@HAVE_SPRINTF@
extern int sprintf (char *restrict s, const char *restrict format, ...);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_VASPRINTF@
#  if @LIBCFUNK_REPLACE_VASPRINTF@
#  elif !@HAVE_VASPRINTF@
extern int vasprintf (char **restrict strp, const char *restrict format,
                      va_list ap);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_VDPRINTF@
#  if @LIBCFUNK_REPLACE_VDPRINTF@
#  elif !@HAVE_VDPRINTF@
extern int vdprintf (int fildes, const char *restrict format, va_list ap);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_VFPRINTF@
#  if @LIBCFUNK_REPLACE_VFPRINTF@
#  elif !@HAVE_VFPRINTF@
extern int vfprintf(FILE *restrict stream, const char *restrict format,
                    va_list ap);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_VPRINTF@
#  if @LIBCFUNK_REPLACE_VPRINTF@
#  elif !@HAVE_VPRINTF@
extern int vprintf (const char *restrict format, va_list ap);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_VSNPRINTF@
#  if @LIBCFUNK_REPLACE_VSNPRINTF@
#  elif !@HAVE_VSNPRINTF@
extern int vsnprintf(char *restrict s, size_t n, const char *restrict format,
                     va_list ap);
#  endif
#endif

/* TODO */
#if @LIBCFUNK_DECLARE_VSPRINTF@
#  if @LIBCFUNK_REPLACE_VSPRINTF@
#  elif !@HAVE_VSPRINTF@
extern int vsprintf (char *restrict s, const char *restrict format,
                     va_list ap);
#  endif
#endif

#endif /* COMPAT_STDIO_H */
