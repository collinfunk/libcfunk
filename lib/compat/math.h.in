/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_MATH_H
#define COMPAT_MATH_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_MATH_H@
#  include_next <math.h>
#endif

#ifndef __has_builtin
#  define __has_builtin(x) 0
#endif

/* e */
#ifndef M_E
#  define M_E 2.7182818284590452354
#endif

/* \log_{2} e */
#ifndef M_LOG2E
#  define M_LOG2E 1.4426950408889634074
#endif

/* \log_{10} e */
#ifndef M_LOG10E
#  define M_LOG10E 0.43429448190325182765
#endif

/* \log_{e} 2 */
#ifndef M_LN2
#  define M_LN2 0.69314718055994530942
#endif

/* \log_{e} 10 */
#ifndef M_LN10
#  define M_LN10 2.30258509299404568402
#endif

/* \pi */
#ifndef M_PI
#  define M_PI 3.14159265358979323846
#endif

/* \frac{\pi}{2} */
#ifndef M_PI_2
#  define M_PI_2 1.57079632679489661923
#endif

/* \frac{\pi}{4} */
#ifndef M_PI_4
#  define M_PI_4 0.78539816339744830962
#endif

/* \frac{1}{\pi} */
#ifndef M_1_PI
#  define M_1_PI 0.31830988618379067154
#endif

/* \frac{2}{\pi} */
#ifndef M_2_PI
#  define M_2_PI 0.63661977236758134308
#endif

/* \frac{2}{\sqrt{\pi}} */
#ifndef M_2_SQRTPI
#  define M_2_SQRTPI 1.12837916709551257390
#endif

/* \sqrt{2} */
#ifndef M_SQRT2
#  define M_SQRT2 1.41421356237309504880
#endif

/* \frac{1}{\sqrt{2}} */
#ifndef M_SQRT1_2
#  define M_SQRT1_2 0.70710678118654752440
#endif

/* Positive double expression. */
#ifndef HUGE_VAL
#  if __has_builtin(__builtin_huge_val)
#    define HUGE_VAL (__builtin_huge_val ())
#  else
#    define HUGE_VAL 1e10000
#  endif
#endif

/* Positive float expression. */
#ifndef HUGE_VALF
#  if __has_builtin(__builtin_huge_valf)
#    define HUGE_VALF (__builtin_huge_valf ())
#  else
#    define HUGE_VALF 1e10000f
#  endif
#endif

/* Positive long double expression. */
#ifndef HUGE_VALL
#  if __has_builtin(__builtin_huge_vall)
#    define HUGE_VALL (__builtin_huge_vall ())
#  else
#    define HUGE_VALL 1e10000l
#  endif
#endif

/* Positive infinity. */
#ifndef INFINITY
#  if __has_builtin(__builtin_inff)
#    define INFINITY (__builtin_inff ())
#  else
#    define INFINITY 1e10000f
#  endif
#endif

/* Not a number. */
#ifndef NAN
#  if __has_builtin(__builtin_nanf)
#    define NAN (__builtin_nanf (""))
#  else
#    define NAN (0.0f / 0.0f)
#  endif
#endif

/* If we don't have a 'signbit' macro pray that our compiler has it builtin. */
#ifndef signbit
#  define signbit(x) __builtin_signbit (x)
#endif

#if @LIBCFUNK_DECLARE_COPYSIGN@
#  if !@HAVE_COPYSIGN@
extern double copysign (double x, double y);
#  endif
#endif

#if @LIBCFUNK_DECLARE_COPYSIGNF@
#  if !@HAVE_COPYSIGNF@
extern float copysignf (float x, float y);
#  endif
#endif

#if @LIBCFUNK_DECLARE_COPYSIGNL@
#  if !@HAVE_COPYSIGNL@
extern long double copysignl (long double x, long double y);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FABS@
#  if !@HAVE_FABS@
extern double fabs (double x);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FABSF@
#  if !@HAVE_FABSF@
extern float fabsf (float x);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FABSL@
#  if !@HAVE_FABSL@
extern long double fabsl (long double x);
#  endif
#endif

#endif /* COMPAT_MATH_H */
