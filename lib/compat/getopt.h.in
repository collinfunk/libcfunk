/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_GETOPT_H
#define COMPAT_GETOPT_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_GETOPT_H@
#  include_next <getopt.h>
#endif

#if @HAVE_STDLIB_H@
#  include <stdlib.h>
#endif

#if @HAVE_UNISTD_H@
#  include <unistd.h>
#endif

#if !@HAVE_STRUCT_OPTION@
struct option
{
  const char *name;
  int has_arg;
  int *flag;
  int val;
};
#endif

#if !@HAVE_OPTARG@
extern char *optarg;
#endif

#if !@HAVE_OPTERR@
extern int opterr;
#endif

#if !@HAVE_OPTIND@
extern int optind;
#endif

#if !@HAVE_OPTOPT@
extern int optopt;
#endif

#ifndef no_argument
#  define no_argument 0
#endif

#ifndef required_argument
#  define required_argument 1
#endif

#ifndef optional_argument
#  define optional_argument 2
#endif

#if @LIBCFUNK_DECLARE_GETOPT@
#  if @LIBCFUNK_REPLACE_GETOPT@
#    undef getopt
#    define getopt _libcfunk_getopt
extern int getopt (int argc, char *const argv[], const char *optstring);
#  elif !@HAVE_GETOPT@
extern int getopt (int argc, char *const argv[], const char *optstring);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETOPT_LONG@
#  if @LIBCFUNK_REPLACE_GETOPT_LONG@
#    undef getopt_long
#    define getopt_long _libcfunk_getopt_long
extern int _libcfunk_getopt_long (int argc, char *const argv[],
                                  const char *optstring,
                                  const struct option *longopts,
                                  int *longindex);
#  elif !@HAVE_GETOPT_LONG@
extern int getopt_long (int argc, char *const argv[], const char *optstring,
                        const struct option *longopts, int *longindex);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETOPT_LONG_ONLY@
#  if @LIBCFUNK_REPLACE_GETOPT_LONG_ONLY@
#    undef getopt_long_only
#    define getopt_long_only _libcfunk_getopt_long_only
extern int _libcfunk_getopt_long_only (int argc, char *const argv[],
                                       const char *optstring,
                                       const struct option *longopts,
                                       int *longindex);
#  elif !@HAVE_GETOPT_LONG_ONLY@
extern int getopt_long_only (int argc, char *const argv[],
                             const char *optstring,
                             const struct option *longopts, int *longindex);
#  endif
#endif

#endif /* COMPAT_GETOPT_H */
