/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_ARGZ_H
#define COMPAT_ARGZ_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_ARGZ_H@
#  if @HAVE_INCLUDE_NEXT@
#    include_next <argz.h>
#  else
#    include "@ARGZ_H_PATH@"
#  endif
#endif

/* Define 'error_t'. */
#include <errno.h>

/* Define 'size_t'. */
#include <stddef.h>

#if @LIBCFUNK_DECLARE_ARGZ_ADD@
#  if @LIBCFUNK_REPLACE_ARGZ_ADD@
#    undef argz_add
#    define argz_add _libcfunk_argz_add
extern error_t _libcfunk_argz_add (char **restrict argz,
                                   size_t *restrict argz_len,
                                   const char *restrict str);
#  elif !@HAVE_ARGZ_ADD@
extern error_t argz_add (char **restrict argz, size_t *restrict argz_len,
                         const char *restrict str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ARGZ_APPEND@
#  if @LIBCFUNK_REPLACE_ARGZ_APPEND@
#    undef argz_append
#    define argz_append _libcfunk_argz_append
extern error_t _libcfunk_argz_append (char **restrict argz,
                                      size_t *restrict argz_len,
                                      const char *restrict buf,
                                      size_t buf_len);
#  elif !@HAVE_ARGZ_APPEND@
extern error_t argz_append (char **restrict argz, size_t *restrict argz_len,
                            const char *restrict buf, size_t buf_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ARGZ_COUNT@
#  if @LIBCFUNK_REPLACE_ARGZ_COUNT@
#    undef argz_count
#    define argz_count _libcfunk_argz_count
extern size_t _libcfunk_argz_count (const char *argz, size_t argz_len);
#  elif !@HAVE_ARGZ_COUNT@
extern size_t argz_count (const char *argz, size_t argz_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ARGZ_CREATE@
#  if @LIBCFUNK_REPLACE_ARGZ_CREATE@
#    undef argz_create
#    define argz_create _libcfunk_argz_create
extern error_t _libcfunk_argz_create (char *const argv[], char **restrict argz,
                                      size_t *restrict argz_len);
#  elif !@HAVE_ARGZ_CREATE@
extern error_t argz_create (char *const argv[], char **restrict argz,
                            size_t *restrict argz_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ARGZ_EXTRACT@
#  if @LIBCFUNK_REPLACE_ARGZ_EXTRACT@
#    undef argz_extract
#    define argz_extract _libcfunk_argz_extract
extern void _libcfunk_argz_extract (const char *restrict argz, size_t argz_len,
                                    char **restrict argv);
#  elif !@HAVE_ARGZ_EXTRACT@
extern void argz_extract (const char *restrict argz, size_t argz_len,
                          char **restrict argv);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ARGZ_NEXT@
#  if @LIBCFUNK_REPLACE_ARGZ_NEXT@
#    undef argz_next
#    define argz_next _libcfunk_argz_next
extern char *_libcfunk_argz_next (const char *restrict argz, size_t argz_len,
                                  const char *restrict entry);
#  elif !@HAVE_ARGZ_NEXT@
extern char *argz_next (const char *restrict argz, size_t argz_len,
                        const char *restrict entry);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ARGZ_STRINGIFY@
#  if @LIBCFUNK_REPLACE_ARGZ_STRINGIFY@
#    undef argz_stringify
#    define argz_stringify _libcfunk_argz_stringify
extern void _libcfunk_argz_stringify (char *argz, size_t len, int sep);
#  elif !@HAVE_ARGZ_STRINGIFY@
extern void argz_stringify (char *argz, size_t len, int sep);
#  endif
#endif

#endif /* COMPAT_ARGZ_H */
