/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_SPAWN_H
#define COMPAT_SPAWN_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_SPAWN_H@
#  include_next <spawn.h>
#endif

#include <sys/types.h>
#include <signal.h>
#include <sched.h>

/* TODO */

#if !@HAVE_POSIX_SPAWNATTR_T@
typedef struct
{
  short int flags;
  pid_t pgroup;
  struct sched_param schedparam;
} posix_spawnattr_t;
#endif

#if !@HAVE_POSIX_SPAWN_FILE_ACTIONS_T@
typedef struct
{
  int todo;
} posix_spawn_file_actions_t;
#endif

/* Don't mess with the systems implementation of posix_spawn. */
#if !@HAVE_SPAWN_H@
#  define POSIX_SPAWN_RESETIDS 0x01
#  define POSIX_SPAWN_SETPGROUP 0x02
#  define POSIX_SPAWN_SETSIGDEF 0x04
#  define POSIX_SPAWN_SETSIGMASK 0x08
#  define POSIX_SPAWN_SETSCHEDPARAM 0x10
#  define POSIX_SPAWN_SETSCHEDULER 0x20
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWN@
#  if !@HAVE_POSIX_SPAWN@
extern int posix_spawn (pid_t *pid, const char *path,
                        const posix_spawn_file_actions_t *file_actions,
                        const posix_spawnattr_t *attrp, char *const argv[],
                        char *const envp[]);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWN_FILE_ACTIONS_ADDCLOSE@
#  if !@HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDCLOSE@
extern int
posix_spawn_file_actions_addclose (posix_spawn_file_actions_t *file_actions,
                                   int fildes);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWN_FILE_ACTIONS_ADDDUP2@
#  if !@HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDDUP2@
extern int
posix_spawn_file_actions_adddup2 (posix_spawn_file_actions_t *file_actions,
                                  int fildes, int newfildes);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWN_FILE_ACTIONS_ADDOPEN@
#  if !@HAVE_POSIX_SPAWN_FILE_ACTIONS_ADDOPEN@
extern int
posix_spawn_file_actions_addopen (posix_spawn_file_actions_t *file_actions,
                                  int fildes, const char *path, int oflag,
                                  mode_t mode);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWN_FILE_ACTIONS_DESTROY@
#  if !@HAVE_POSIX_SPAWN_FILE_ACTIONS_DESTROY@
extern int
posix_spawn_file_actions_destroy (posix_spawn_file_actions_t *file_actions);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWN_FILE_ACTIONS_INIT@
#  if !@HAVE_POSIX_SPAWN_FILE_ACTIONS_INIT@
extern int
posix_spawn_file_actions_init (posix_spawn_file_actions_t *file_actions);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_DESTROY@
#  if !@HAVE_POSIX_SPAWNATTR_DESTROY@
extern int posix_spawnattr_destroy (posix_spawnattr_t *attr);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_GETFLAGS@
#  if !@HAVE_POSIX_SPAWNATTR_GETFLAGS@
extern int posix_spawnattr_getflags (const posix_spawnattr_t *attr,
                                     short int *flags);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_GETPGROUP@
#  if !@HAVE_POSIX_SPAWNATTR_GETPGROUP@
extern int posix_spawnattr_getpgroup (const posix_spawnattr_t *attr,
                                      pid_t *pgroup);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_GETSCHEDPARAM@
#  if !@HAVE_POSIX_SPAWNATTR_GETSCHEDPARAM@
extern int posix_spawnattr_getschedparam (const posix_spawnattr_t *attr,
                                          struct sched_param *schedparam);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_GETSCHEDPOLICY@
#  if !@HAVE_POSIX_SPAWNATTR_GETSCHEDPOLICY@
extern int posix_spawnattr_getschedpolicy (const posix_spawnattr_t *attr,
                                           int *schedpolicy);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_GETSIGDEFAULT@
#  if !@HAVE_POSIX_SPAWNATTR_GETSIGDEFAULT@
extern int posix_spawnattr_getsigdefault (const posix_spawnattr_t *attr,
                                          sigset_t *sigdefault);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_GETSIGMASK@
#  if !@HAVE_POSIX_SPAWNATTR_GETSIGMASK@
extern int posix_spawnattr_getsigmask (const posix_spawnattr_t *attr,
                                       sigset_t *sigmask);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_INIT@
#  if !@HAVE_POSIX_SPAWNATTR_INIT@
extern int posix_spawnattr_init (posix_spawnattr_t *attr);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_SETFLAGS@
#  if !@HAVE_POSIX_SPAWNATTR_SETFLAGS@
extern int posix_spawnattr_setflags (posix_spawnattr_t *attr, short int flags);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_SETPGROUP@
#  if !@HAVE_POSIX_SPAWNATTR_SETPGROUP@
extern int posix_spawnattr_setpgroup (posix_spawnattr_t *attr, pid_t pgroup);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_SETSCHEDPARAM@
#  if !@HAVE_POSIX_SPAWNATTR_SETSCHEDPARAM@
extern int
posix_spawnattr_setschedparam (posix_spawnattr_t *attr,
                               const struct sched_param *schedparam);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_SETSCHEDPOLICY@
#  if !@HAVE_POSIX_SPAWNATTR_SETSCHEDPOLICY@
extern int posix_spawnattr_setschedpolicy (posix_spawnattr_t *attr,
                                           int schedpolicy);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_SETSIGDEFAULT@
#  if !@HAVE_POSIX_SPAWNATTR_SETSIGDEFAULT@
extern int posix_spawnattr_setsigdefault (posix_spawnattr_t *attr,
                                          const sigset_t *sigdefault);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNATTR_SETSIGMASK@
#  if !@HAVE_POSIX_SPAWNATTR_SETSIGMASK@
extern int posix_spawnattr_setsigmask (posix_spawnattr_t *attr,
                                       const sigset_t *sigmask);
#  endif
#endif

#if @LIBCFUNK_DECLARE_POSIX_SPAWNP@
#  if !@HAVE_POSIX_SPAWNP@
extern int posix_spawnp (pid_t *pid, const char *file,
                         const posix_spawn_file_actions_t *file_actions,
                         const posix_spawnattr_t *attrp, char *const argv[],
                         char *const envp[]);
#  endif
#endif

#endif /* COMPAT_SPAWN_H */
