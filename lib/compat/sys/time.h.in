/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_SYS_TIME_H
#define COMPAT_SYS_TIME_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_SYS_TIME_H@
#  if @HAVE_INCLUDE_NEXT@
#    include_next <sys/time.h>
#  else
#    include "@SYS_TIME_H_PATH@"
#  endif
#endif

#include <sys/types.h>

#if !@HAVE_STRUCT_TIMEVAL@
struct timeval
{
  time_t tv_sec;
  suseconds_t tv_usec;
};
#endif

#if !@HAVE_STRUCT_ITIMERVAL@
struct itimerval
{
  struct timeval it_interval;
  struct timeval it_value;
};
#endif

/* Convert TV to a struct timespec stored in TS. */
#ifndef TIMEVAL_TO_TIMESPEC
#  define TIMEVAL_TO_TIMESPEC(tv, ts)                                         \
    do                                                                        \
      {                                                                       \
        (ts)->tv_sec = (tv)->tv_sec;                                          \
        (ts)->tv_nsec = (tv)->tv_usec * 1000;                                 \
      }                                                                       \
    while (0)
#endif

/* Convert TS to struct timeval stored in TV. */
#ifndef TIMESPEC_TO_TIMEVAL
#  define TIMESPEC_TO_TIMEVAL(tv, ts)                                         \
    do                                                                        \
      {                                                                       \
        (tv)->tv_sec = (ts)->tv_sec;                                          \
        (tv)->tv_usec = (ts)->tv_nsec / 1000;                                 \
      }                                                                       \
    while (0)
#endif

#if @LIBCFUNK_DECLARE_GETTIMEOFDAY@
#  if @LIBCFUNK_REPLACE_GETTIMEOFDAY@
#    undef gettimeofday
#    define gettimeofday _libcfunk_gettimeofday
extern int _libcfunk_gettimeofday (struct timeval *tp, void *tzp);
#  elif !@HAVE_GETTIMEOFDAY@
extern int gettimeofday (struct timeval *tp, void *tzp);
#  endif
#endif

#endif /* COMPAT_SYS_TIME_H */
