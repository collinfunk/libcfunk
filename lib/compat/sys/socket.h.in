/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_SYS_SOCKET_H
#define COMPAT_SYS_SOCKET_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_SYS_SOCKET_H@
#  include_next <sys/socket.h>
#endif

#include <sys/types.h>
#include <sys/uio.h>
#include <stddef.h>

#if @HAVE_WINSOCK2_H@
#  include <winsock2.h>
#endif

#if @HAVE_WS2TCPIP_H@
#  include <ws2tcpip.h>
#endif

#if @HAVE_IO_H@
#  include <io.h>
#endif

#if !@HAVE_SOCKETLEN_T@
typedef unsigned int socketlen_t;
#endif

#if !@HAVE_STRUCT_CMSGHDR@
struct cmsghdr
{
  socklen_t cmsg_len;
  int cmsg_level;
  int cmsg_type;
};
#endif

#if @LIBCFUNK_DECLARE_SOCKET@
#  if @LIBCFUNK_REPLACE_SOCKET@
#    undef socket
#    define socket _libcfunk_socket
int _libcfunk_socket (int domain, int type, int protocol);
#  endif
#endif

#if @LIBCFUNK_DECLARE_ACCEPT@
#  if @LIBCFUNK_REPLACE_ACCEPT@
#    undef accept
#    define accept _libcfunk_accept
extern int _libcfunk_accept (int socket, struct sockaddr *address,
                             socklen_t *address_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_BIND@
#  if @LIBCFUNK_REPLACE_BIND@
#    undef bind
#    define bind _libcfunk_bind
extern int _libcfunk_bind (int socket, const struct sockaddr *address,
                           socklen_t address_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_CONNECT@
#  if @LIBCFUNK_REPLACE_CONNECT@
#    undef connect
#    define connect _libcfunk_connect
extern int _libcfunk_connect (int socket, const struct sockaddr *address,
                              socklen_t address_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SEND@
#  if @LIBCFUNK_REPLACE_SEND@
#    undef send
#    define send _libcfunk_send
extern ssize_t _libcfunk_send (int socket, const void *buffer, size_t length,
                               int flags);
#  endif
#endif

#if @LIBCFUNK_DECLARE_RECV@
#  if @LIBCFUNK_REPLACE_RECV@
#    undef recv
#    define recv _libcfunk_recv
extern ssize_t _libcfunk_recv (int socket, void *buffer, size_t length,
                               int flags);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LISTEN@
#  if @LIBCFUNK_REPLACE_LISTEN@
#    undef listen
#    define listen _libcfunk_listen
extern int _libcfunk_listen (int socket, int back_log);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETPEERNAME@
#  if @LIBCFUNK_REPLACE_GETPEERNAME@
#    undef getpeername
#    define getpeername _libcfunk_getpeername
extern int _libcfunk_getpeername (int socket, struct sockaddr *address,
                                  socklen_t *address_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_GETSOCKNAME@
#  if @LIBCFUNK_REPLACE_GETSOCKNAME@
#    undef getsockname
#    define getsockname _libcfunk_getsockname
extern int _libcfunk_getsockname (int socket, struct sockaddr *address,
                                  socklen_t *address_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SETSOCKOPT@
#  if @LIBCFUNK_REPLACE_SETSOCKOPT@
#    undef setsockopt
#    define setsockopt _libcfunk_setsockopt
extern int _libcfunk_setsockopt (int socket, int level, int option_name,
                                 const void *option_value,
                                 socklen_t option_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SENDTO@
#  if @LIBCFUNK_REPLACE_SENDTO@
#    undef sendto
#    define sendto _libcfunk_sendto
extern ssize_t _libcfunk_sendto (int socket, const void *message, size_t length,
                                 int flags, const struct sockaddr *dest_addr,
                                 socklen_t dest_len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_RECVFROM@
#  if @LIBCFUNK_REPLACE_RECVFROM@
#    undef recvfrom
#    define recvfrom _libcfunk_recvfrom
extern ssize_t _libcfunk_recvfrom (int socket, void *buffer, size_t length,
                                   int flags, struct sockaddr *address,
                                   socklen_t *address_len);
#  endif
#endif

#endif /* COMPAT_SYS_SOCKET_H */
