/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#ifndef COMPAT_SYS_SELECT_H
#define COMPAT_SYS_SELECT_H

#include <sys/types.h>

#if @HAVE_SYS_SELECT_H@
#  if @HAVE_INCLUDE_NEXT@
#    include_next <sys/select.h>
#  else
#    include "@SYS_SELECT_H_PATH@"
#  endif
#endif

#include <signal.h>
#include <time.h>

/* Windows defines fd_set and functions in their socket headers. */
#if @HAVE_WINSOCK2_H@
#  include <winsock2.h>
#endif

#if @LIBCFUNK_DECLARE_PSELECT@
#  if @LIBCFUNK_REPLACE_PSELECT@
#    undef pselect
#    define pselect _libcfunk_pselect
extern int _libcfunk_pselect (int nfds, fd_set *restrict readfds,
                              fd_set *restrict writefds,
                              fd_set *restrict errorfds,
                              const struct timespec *restrict timeout,
                              const sigset_t *restrict sigmask);
#  elif !@HAVE_PSELECT@
extern int pselect (int nfds, fd_set *restrict readfds,
                    fd_set *restrict writefds, fd_set *restrict errorfds,
                    const struct timespec *restrict timeout,
                    const sigset_t *restrict sigmask);
#  endif
#endif

#if @LIBCFUNK_DECLARE_SELECT@
#  if @LIBCFUNK_REPLACE_SELECT@
#    undef select
#    define select _libcfunk_select
extern int _libcfunk_select (int nfds, fd_set *restrict readfds,
                             fd_set *restrict writefds,
                             fd_set *restrict errorfds,
                             struct timeval *restrict timeout);
#  elif !@HAVE_SELECT@
extern int select (int nfds, fd_set *restrict readfds,
                   fd_set *restrict writefds, fd_set *restrict errorfds,
                   struct timeval *restrict timeout);
#  endif
#endif

#endif /* COMPAT_SYS_SELECT_H */
