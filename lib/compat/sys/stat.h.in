/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_SYS_STAT_H
#define COMPAT_SYS_STAT_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_SYS_STAT_H@
#  if @HAVE_INCLUDE_NEXT@
#    include_next <sys/stat.h>
#  else
#    include "@SYS_STAT_H_PATH@"
#  endif
#endif

#include <sys/types.h>
#include <time.h>

/* Lots of Windows functions are declared here instead of sys/stat.h */
#if @HAVE_WINDOWS_H@
#  include <direct.h>
#  include <io.h>
#endif

#if !@HAVE_STRUCT_STAT@
struct stat
{
  dev_t st_dev;
  ino_t st_ino;
  mode_t st_mode;
  nlink_t st_nlink;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  off_t st_size;
  struct timespec st_atim;
  struct timespec st_mtim;
  struct timespec st_ctim;
  blksize_t st_blksize;
  blkcnt_t st_blocks;
};
#endif

#ifndef S_IXOTH
#  define S_IXOTH 0000001
#endif

#ifndef S_IWOTH
#  define S_IWOTH 0000002
#endif

#ifndef S_IROTH
#  define S_IROTH 0000004
#endif

#ifndef S_IRWXO
#  define S_IRWXO 0000007
#endif

#ifndef S_IXGRP
#  define S_IXGRP 0000010
#endif

#ifndef S_IWGRP
#  define S_IWGRP 0000020
#endif

#ifndef S_IRGRP
#  define S_IRGRP 0000040
#endif

#ifndef S_IRWXG
#  define S_IRWXG 0000070
#endif

#ifndef S_IXUSR
#  define S_IXUSR 0000100
#endif

#ifndef S_IWUSR
#  define S_IWUSR 0000200
#endif

#ifndef S_IRUSR
#  define S_IRUSR 0000400
#endif

#ifndef S_IRWXU
#  define S_IRWXU 0000700
#endif

#ifndef S_ISVTX
#  define S_ISVTX 0001000
#endif

#ifndef S_ISGID
#  define S_ISGID 0002000
#endif

#ifndef S_ISUID
#  define S_ISUID 0004000
#endif

#ifndef S_IRWXO
#  define S_IRWXO (S_IROTH | S_IWOTH | S_IXOTH)
#endif

#ifndef S_IRWXG
#  define S_IRWXG (S_IRGRP | S_IWGRP | S_IXGRP)
#endif

#ifndef S_IRWXU
#  define S_IRWXU (S_IRUSR | S_IWUSR | S_IXUSR)
#endif

/* Filetype mask. */
#ifndef S_IFMT
#  define S_IFMT 0170000
#endif

/* Block special. */
#ifndef S_ISBLK
#  define S_ISBLK(x) 0
#endif

/* Character special. */
#ifndef S_ISCHR
#  define S_ISCHR(x) 0
#endif

/* Directory. */
#ifndef S_ISDIR
#  define S_ISDIR(x) 0
#endif

/* Pipe or FIFO. */
#ifndef S_ISFIFO
#  define S_ISFIFO(x) 0
#endif

/* Regular file. */
#ifndef S_ISREG
#  define S_ISREG(x) 0
#endif

/* Symbolic link. */
#ifndef S_ISLNK
#  define S_ISLNK(x) 0
#endif

/* Socket. */
#ifndef S_ISSOCK
#  define S_ISSOCK(x) 0
#endif

/* Message queue. */
#ifndef S_TYPEISMQ
#  define S_TYPEISMQ(x) 0
#endif

/* Semaphore. */
#ifndef S_TYPEISSEM
#  define S_TYPEISSEM(x) 0
#endif

/* Shared memory object. */
#ifndef S_TYPEISSHM
#  define S_TYPEISSHM(x) 0
#endif

/* Typed memory object. */
#ifndef S_TYPEISTMO
#  define S_TYPEISTMO(x) 0
#endif

/* Whiteout. */
#ifndef S_ISWHT
#  define S_ISWHT(x) 0
#endif

#if @LIBCFUNK_DECLARE_CHMOD@
#  if !@HAVE_CHMOD@
extern int chmod (const char *path, mode_t mode);
#  endif
#endif

#if @LIBCFUNK_DECLARE_FSTAT@
#  if !@HAVE_FSTAT@
extern int fstat (int fd, struct stat *buffer);
#  endif
#endif

#if @LIBCFUNK_DECLARE_LSTAT@
#  if !@HAVE_LSTAT@
extern int lstat (const char *path, struct stat *buffer);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MKDIR@
#  if @LIBCFUNK_REPLACE_MKDIR@
#    undef mkdir
#    define mkdir _libcfunk_mkdir
extern int _libcfunk_mkdir (const char *path, mode_t mode);
#  elif !@HAVE_MKDIR@
extern int mkdir (const char *path, mode_t mode);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MKFIFO@
#  if !@HAVE_MKFIFO@
extern int mkfifo (const char *path, mode_t mode);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MKNOD@
#  if !@HAVE_MKNOD@
extern int mknod (const char *path, mode_t mode, dev_t dev);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STAT@
#  if !@HAVE_STAT@
extern int stat (const char *path, struct stat *buffer);
#  endif
#endif

#endif /* COMPAT_SYS_STAT_H */
