/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_ARPA_INET_H
#define COMPAT_ARPA_INET_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_ARPA_INET_H@
#  if @HAVE_INCLUDE_NEXT@
#    include_next <arpa/inet.h>
#  else
#    include "@ARPA_INET_H_PATH@"
#  endif
#endif

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#if @LIBCFUNK_DECLARE_INET_ADDR@
#  if @LIBCFUNK_REPLACE_INET_ADDR@
#    undef inet_addr
#    define inet_addr _libcfunk_inet_addr
extern in_addr_t _libcfunk_inet_addr (const char *cp);
#  elif !@HAVE_INET_ADDR@
extern in_addr_t inet_addr (const char *cp);
#  endif
#endif

#if @LIBCFUNK_DECLARE_INET_ATON@
#  if @LIBCFUNK_REPLACE_INET_ATON@
#    undef inet_aton
#    define inet_aton _libcfunk_inet_aton
extern int _libcfunk_inet_aton (const char *cp, struct in_addr *addr);
#  elif !@HAVE_INET_ATON@
extern int inet_aton (const char *cp, struct in_addr *addr);
#  endif
#endif

#if @LIBCFUNK_DECLARE_INET_NTOA@
#  if @LIBCFUNK_REPLACE_INET_NTOA@
#    undef inet_ntoa
#    define inet_ntoa _libcfunk_inet_ntoa
extern char *_libcfunk_inet_ntoa (struct in_addr in);
#  elif !@HAVE_INET_NTOA@
extern char *inet_ntoa (struct in_addr in);
#  endif
#endif

#if @LIBCFUNK_DECLARE_INET_NTOP@
#  if @LIBCFUNK_REPLACE_INET_NTOP@
#    undef inet_ntop
#    define inet_ntop _libcfunk_inet_ntop
extern const char *_libcfunk_inet_ntop (int af, const void *restrict src,
                                        char *restrict dst, socklen_t size);
#  elif !@HAVE_INET_NTOP@
extern const char *inet_ntop (int af, const void *restrict src,
                              char *restrict dst, socklen_t size);
#  endif
#endif

#if @LIBCFUNK_DECLARE_INET_PTON@
#  if @LIBCFUNK_REPLACE_INET_PTON@
#    undef inet_pton
#    define inet_pton _libcfunk_inet_pton
extern int _libcfunk_inet_pton (int af, const char *restrict src,
                                void *restrict dst);
#  elif !@HAVE_INET_PTON@
extern int inet_pton (int af, const char *restrict src, void *restrict dst);
#  endif
#endif

#endif /* COMPAT_ARPA_INET_H */
