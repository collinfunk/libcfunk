/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_STRING_H
#define COMPAT_STRING_H

#include <config.h>

#include <sys/types.h>

#include <stddef.h>

#if @HAVE_STRING_H@
#  include_next <string.h>
#endif

#if @LIBCFUNK_DECLARE_STRCHRNUL@
#  if !@HAVE_STRCHRNUL@
extern char *strchrnul (const char *str, int ch);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRMODE@
#  if !@HAVE_STRMODE@
extern void strmode (mode_t mode, char *str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_EXPLICIT_BZERO@
#  if !@HAVE_EXPLICIT_BZERO@
extern void explicit_bzero (void *s, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRDUP@
#  if !@HAVE_STRDUP@
extern char *strdup (const char *s);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRNDUP@
#  if !@HAVE_STRNDUP@
extern char *strndup (const char *s, size_t size);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRLEN@
#  if !@HAVE_STRLEN@
extern size_t strlen (const char *str);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRNLEN@
#  if !@HAVE_STRNLEN@
extern size_t strnlen (const char *str, size_t maxlen);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STPCPY@
#  if !@HAVE_STPCPY@
extern char *stpcpy (char *dest, const char *src);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRSEP@
#  if !@HAVE_STRSEP@
extern char *strsep (char **stringp, const char *delim);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRPBRK@
#  if !@HAVE_STRPBRK@
extern char *strpbrk (const char *str, const char *charset);
#  endif
#endif

#if @LIBCFUNK_DECLARE_TIMINGSAFE_BCMP@
#  if !@HAVE_TIMINGSAFE_BCMP@
extern int timingsafe_bcmp (const void *b1, const void *b2, size_t len);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRCHR@
#  if !@HAVE_STRCHR@
extern char *strchr (const char *s, int c);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRRCHR@
#  if !@HAVE_STRRCHR@
extern char *strrchr (const char *s, int c);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MEMCHR@
#  if !@HAVE_MEMCHR@
extern void *memchr (const void *s, int c, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MEMRCHR@
#  if !@HAVE_MEMRCHR@
extern void *memrchr (const void *s, int c, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_RAWMEMCHR@
#  if !@HAVE_RAWMEMCHR@
extern void *rawmemchr (const void *s, int c);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MEMCMP@
#  if !@HAVE_MEMCMP@
extern int memcmp (const void *s1, const void *s2, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MEMCPY@
#  if !@HAVE_MEMCPY@
extern void *memcpy (void *s1, const void *s2, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MEMMOVE@
#  if !@HAVE_MEMMOVE@
extern void *memmove (void *s1, const void *s2, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_MEMSET@
#  if !@HAVE_MEMSET@
extern void *memset (void *s, int c, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRCAT@
#  if !@HAVE_STRCAT@
extern char *strcat (char *s1, const char *s2);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRCMP@
#  if !@HAVE_STRCMP@
extern int strcmp (const char *s1, const char *s2);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRNCAT@
#  if !@HAVE_STRNCAT@
extern char *strncat (char *s1, const char *s2, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRNCMP@
#  if !@HAVE_STRNCMP@
extern int strncmp (const char *s1, const char *s2, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRNCPY@
#  if !@HAVE_STRNCPY@
extern char *strncpy (char *s1, const char *s2, size_t n);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRSPN@
#  if !@HAVE_STRSPN@
extern size_t strspn (const char *s1, const char *s2);
#  endif
#endif

#if @LIBCFUNK_DECLARE_STRCSPN@
#  if !@HAVE_STRCSPN@
extern size_t strcspn (const char *s1, const char *s2);
#  endif
#endif

#endif /* COMPAT_STRING_H */
