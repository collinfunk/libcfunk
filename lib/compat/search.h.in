/*-
 * Copyright (c) 2023, Collin Funk
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef COMPAT_SEARCH_H
#define COMPAT_SEARCH_H

#ifdef __GNUC__
#  pragma GCC system_header
#endif

#if @HAVE_SEARCH_H@
#  if @HAVE_INCLUDE_NEXT@
#    include_next <search.h>
#  else
#    include "@SEARCH_H_PATH@"
#  endif
#endif

/* Define 'size_t'. */
#include <stddef.h>

#if !@HAVE_STRUCT_QELEM@
struct qelem
{
  struct qelem *q_forw;
  struct qelem *q_back;
  char q_data[1];
};
#endif

/* Hopefully it has both... */
#if /* !@HAVE_STRUCT_ENTRY@ || */ !@HAVE_ENTRY@
typedef struct entry
{
  char *key;
  void *data;
} ENTRY;
#endif

#if !@HAVE_ACTION@
typedef enum
{
  FIND,
  ENTER
} ACTION;
#endif

#if !@HAVE_VISIT@
typedef enum
{
  preorder,
  postorder,
  endorder,
  leaf
} VISIT;
#endif

#if @LIBCFUNK_DECLARE_INSQUE@
#  if @LIBCFUNK_REPLACE_INSQUE@
#    undef insque
#    define insque _libcfunk_insque
extern void _libcfunk_insque (void *element, void *pred);
#  elif !@HAVE_INSQUE@
extern void insque (void *element, void *pred);
#  endif
#endif

#if @LIBCFUNK_DECLARE_REMQUE@
#  if @LIBCFUNK_REPLACE_REMQUE@
#    undef remque
#    define remque _libcfunk_remque
extern void _libcfunk_remque (void *element);
#  elif !@HAVE_REMQUE@
extern void remque (void *element);
#  endif
#endif

#endif /* COMPAT_SEARCH_H */
