
cmake_minimum_required(VERSION 3.20 FATAL_ERROR)
project(libcfunk LANGUAGES C)

include(CheckSymbolExists)
include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckIncludeFiles)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
  list(APPEND CMAKE_REQUIRED_DEFINITIONS "-D_GNU_SOURCE")
endif ()

# Options
option(BUILD_SHARED_LIBS "Build shared libraries." OFF)
option(BUILD_TESTS "Build test executables." ON)

set(LIBCFUNK_MODULE_BASE16 OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_BASE32 OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_BASE64 OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_BCMP OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_BCOPY OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_BSTREE OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_BSWAP OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_BZERO OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_CIRCULAR_SHIFT OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_COPY_FILE OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_CPU_COUNT OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_CRC32 OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_ERR_H OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_ERR OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_ERROR_H OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_ERROR OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_FFS OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_FILENAME OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_FLS OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_GCD OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_GETENTROPY OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_GETRANDOM OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_GET_UMASK OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_INDEX OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_INT_OVERFLOW OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_LIST OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_PHYSICAL_MEMORY OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_POPCOUNT OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_PROGRAM_NAME OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_RBTREE OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_READ_FULL OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_READ_NOINTR OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_RINDEX OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_SLIST OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_SPLAY_TREE OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_STRINGS_H OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_SYS_RANDOM_H OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_WRITE_FULL OFF CACHE BOOL "")
set(LIBCFUNK_MODULE_WRITE_NOINTR OFF CACHE BOOL "")

# Module dependencies
if(LIBCFUNK_MODULE_BCMP)
  set(LIBCFUNK_MODULE_STRINGS_H ON CACHE BOOL "" FORCE)
endif ()

if(LIBCFUNK_MODULE_BCOPY)
  set(LIBCFUNK_MODULE_STRINGS_H ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_BZERO)
  set(LIBCFUNK_MODULE_STRINGS_H ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_COPY_FILE)
  set(LIBCFUNK_MODULE_READ_NOINTR ON CACHE BOOL "" FORCE)
  set(LIBCFUNK_MODULE_WRITE_FULL ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_ERR)
  set(LIBCFUNK_MODULE_ERR_H ON CACHE BOOL "" FORCE)
  set(LIBCFUNK_MODULE_PROGRAM_NAME ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_ERROR)
  set(LIBCFUNK_MODULE_ERROR_H ON CACHE BOOL "" FORCE)
  set(LIBCFUNK_MODULE_PROGRAM_NAME ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_FFS)
  set(LIBCFUNK_MODULE_STRINGS_H ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_FLS)
  set(LIBCFUNK_MODULE_STRINGS_H ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_GETENTROPY)
  set(LIBCFUNK_MODULE_SYS_RANDOM_H ON CACHE BOOL "" FORCE)
  check_include_file("windows.h" HAVE_WINDOWS_H)
  if (HAVE_WINDOWS_H)
    check_include_files("windows.h;bcrypt.h" HAVE_BCRYPT_H)
    if (NOT HAVE_BCRYPT_H)
      message(FATAL_ERROR "Unsupported windows version.")
    else ()
      set(LIBCFUNK_MODULE_GETRANDOM ON CACHE BOOL "" FORCE)
    endif ()
  endif ()
endif ()

if (LIBCFUNK_MODULE_GETRANDOM)
  set(LIBCFUNK_MODULE_SYS_RANDOM_H ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_PROGRAM_NAME)
  set(LIBCFUNK_MODULE_FILENAME ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_POPCOUNT)
  set(LIBCFUNK_MODULE_STRINGS_H ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_READ_FULL)
  set(LIBCFUNK_MODULE_READ_NOINTR ON CACHE BOOL "" FORCE)
endif ()

if (LIBCFUNK_MODULE_WRITE_FULL)
  set(LIBCFUNK_MODULE_WRITE_NOINTR ON CACHE BOOL "" FORCE)
endif ()

# Header checks
if (LIBCFUNK_MODULE_ERR_H)
  check_include_file("err.h" HAVE_ERR_H)
endif ()

if (LIBCFUNK_MODULE_ERROR_H)
  check_include_file("error.h" HAVE_ERROR_H)
endif ()

if (LIBCFUNK_MODULE_STRINGS_H)
  check_include_file("strings.h" HAVE_STRINGS_H)
endif ()

if (LIBCFUNK_MODULE_SYS_RANDOM_H)
  check_include_file("sys/random.h" HAVE_SYS_RANDOM_H)
endif ()

# Function and variable checks.
if(LIBCFUNK_MODULE_BCMP AND HAVE_STRINGS_H)
  check_function_exists("bcmp" HAVE_BCMP)
endif ()

if(LIBCFUNK_MODULE_BCOPY AND HAVE_STRINGS_H)
  check_function_exists("bcmp" HAVE_BCOPY)
endif ()

if (LIBCFUNK_MODULE_BZERO AND HAVE_STRINGS_H)
  check_function_exists("bzero" HAVE_BZERO)
endif ()

if (LIBCFUNK_MODULE_CPU_COUNT)
  check_include_file("sys/sysctl.h" HAVE_SYS_SYSCTL_H)
  check_include_files("windows.h" HAVE_WINDOWS_H)
  check_include_files("windows.h;sysinfoapi.h" HAVE_SYSINFOAPI_H)
endif ()

if (LIBCFUNK_MODULE_ERR AND HAVE_ERR_H)
  check_function_exists("err" HAVE_ERR)
  check_function_exists("verr" HAVE_VERR)
  check_function_exists("errc" HAVE_ERRC)
  check_function_exists("verrc" HAVE_VERRC)
  check_function_exists("errx" HAVE_ERRX)
  check_function_exists("verrx" HAVE_VERRX)
  check_function_exists("warn" HAVE_WARN)
  check_function_exists("vwarn" HAVE_VWARN)
  check_function_exists("warnc" HAVE_WARNC)
  check_function_exists("vwarnc" HAVE_VWARNC)
  check_function_exists("warnx" HAVE_WARNX)
  check_function_exists("vwarnx" HAVE_VWARNX)
endif ()

if (LIBCFUNK_MODULE_ERROR AND HAVE_ERROR_H)
  check_symbol_exists("error_message_count" "error.h" HAVE_ERROR_MESSAGE_COUNT)
  check_symbol_exists("error_one_per_line" "error.h" HAVE_ERROR_ONE_PER_LINE)
  check_symbol_exists("error_print_progname" "error.h" HAVE_ERROR_PRINT_PROGNAME)
  check_function_exists("error" HAVE_ERROR)
  check_function_exists("error_at_line" HAVE_ERROR_AT_LINE)
endif ()

if (LIBCFUNK_MODULE_FFS AND HAVE_STRINGS_H)
  check_function_exists("ffs" HAVE_FFS)
  check_function_exists("ffsl" HAVE_FFSL)
  check_function_exists("ffsll" HAVE_FFSLL)
endif ()

if (LIBCFUNK_MODULE_FLS AND HAVE_STRINGS_H)
  check_function_exists("fls" HAVE_FLS)
  check_function_exists("flsl" HAVE_FLSL)
  check_function_exists("flsll" HAVE_FLSLL)
endif ()

if (LIBCFUNK_MODULE_GETENTROPY)
  check_function_exists("getentropy" HAVE_GETENTROPY)
endif ()

if (LIBCFUNK_MODULE_GETRANDOM AND HAVE_SYS_RANDOM_H)
  check_function_exists("getrandom" HAVE_GETRANDOM)
endif ()

if (LIBCFUNK_MODULE_PHYSICAL_MEMORY)
  check_include_file("sys/sysctl.h" HAVE_SYS_SYSCTL_H)
  check_include_files("windows.h" HAVE_WINDOWS_H)
  check_include_files("windows.h;sysinfoapi.h" HAVE_SYSINFOAPI_H)
endif ()

if (LIBCFUNK_MODULE_POPCOUNT AND HAVE_STRINGS_H)
  check_function_exists("popcount" HAVE_POPCOUNT)
  check_function_exists("popcountl" HAVE_POPCOUNTL)
  check_function_exists("popcountll" HAVE_POPCOUNTL)
endif ()

if (LIBCFUNK_MODULE_PROGRAM_NAME)
  check_symbol_exists("__argc" "stdlib.h" HAVE___ARGC)
  check_symbol_exists("__argv" "stdlib.h" HAVE___ARGV)
  check_symbol_exists("__progname" "stdlib.h" HAVE___PROGNAME)
  check_symbol_exists("program_invocation_name" "errno.h" HAVE_PROGRAM_INVOCATION_NAME)
  check_symbol_exists("program_invocation_short_name" "errno.h" HAVE_PROGRAM_INVOCATION_SHORT_NAME)
  check_function_exists("getexecname" HAVE_GETEXECNAME)
  check_function_exists("getprogname" HAVE_GETPROGNAME)
  check_function_exists("setprogname" HAVE_SETPROGNAME)
  check_include_files("windows.h" HAVE_WINDOWS_H)
  check_include_files("windows.h;sysinfoapi.h" HAVE_SYSINFOAPI_H)
endif ()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_BINARY_DIR}/config.h)

add_subdirectory(lib)

if (BUILD_TESTS)
  add_subdirectory(tests)
endif ()
